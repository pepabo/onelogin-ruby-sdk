=begin
#OneLogin API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.0.0-alpha.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'cgi'

module OneLogin
  class DefaultApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user.
    # @param activate_factor_request [ActivateFactorRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def activate_factor(authorization, user_id, activate_factor_request, opts = {})
      activate_factor_with_http_info(authorization, user_id, activate_factor_request, opts)
      nil
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user.
    # @param activate_factor_request [ActivateFactorRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def activate_factor_with_http_info(authorization, user_id, activate_factor_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.activate_factor ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.activate_factor"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.activate_factor"
      end
      # verify the required parameter 'activate_factor_request' is set
      if @api_client.config.client_side_validation && activate_factor_request.nil?
        fail ArgumentError, "Missing the required parameter 'activate_factor_request' when calling DefaultApi.activate_factor"
      end
      # resource path
      local_var_path = '/api/2/mfa/users/{user_id}/verifications'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(activate_factor_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.activate_factor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#activate_factor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param add_access_token_claim_request [AddAccessTokenClaimRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Id]
    def add_access_token_claim(authorization, id, add_access_token_claim_request, opts = {})
      data, _status_code, _headers = add_access_token_claim_with_http_info(authorization, id, add_access_token_claim_request, opts)
      data
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param add_access_token_claim_request [AddAccessTokenClaimRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Id, Integer, Hash)>] Id data, response status code and response headers
    def add_access_token_claim_with_http_info(authorization, id, add_access_token_claim_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.add_access_token_claim ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.add_access_token_claim"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.add_access_token_claim"
      end
      # verify the required parameter 'add_access_token_claim_request' is set
      if @api_client.config.client_side_validation && add_access_token_claim_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_access_token_claim_request' when calling DefaultApi.add_access_token_claim"
      end
      # resource path
      local_var_path = '/api/2/api_authorizations/{id}/claims'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_access_token_claim_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Id'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.add_access_token_claim",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_access_token_claim\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param add_client_app_request [AddClientAppRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ClientApp]
    def add_client_app(authorization, id, add_client_app_request, opts = {})
      data, _status_code, _headers = add_client_app_with_http_info(authorization, id, add_client_app_request, opts)
      data
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param add_client_app_request [AddClientAppRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClientApp, Integer, Hash)>] ClientApp data, response status code and response headers
    def add_client_app_with_http_info(authorization, id, add_client_app_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.add_client_app ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.add_client_app"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.add_client_app"
      end
      # verify the required parameter 'add_client_app_request' is set
      if @api_client.config.client_side_validation && add_client_app_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_client_app_request' when calling DefaultApi.add_client_app"
      end
      # resource path
      local_var_path = '/api/2/api_authorizations/{id}/clients'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_client_app_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ClientApp'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.add_client_app",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_client_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param role_id [Integer] Set to the id of the role you want to return.
    # @param request_body [Array<Integer>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<AddRoleUsers200ResponseInner>]
    def add_role_admins(authorization, role_id, request_body, opts = {})
      data, _status_code, _headers = add_role_admins_with_http_info(authorization, role_id, request_body, opts)
      data
    end

    # @param authorization [String] 
    # @param role_id [Integer] Set to the id of the role you want to return.
    # @param request_body [Array<Integer>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AddRoleUsers200ResponseInner>, Integer, Hash)>] Array<AddRoleUsers200ResponseInner> data, response status code and response headers
    def add_role_admins_with_http_info(authorization, role_id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.add_role_admins ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.add_role_admins"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling DefaultApi.add_role_admins"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling DefaultApi.add_role_admins"
      end
      # resource path
      local_var_path = '/api/2/roles/{role_id}/admins'.sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddRoleUsers200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.add_role_admins",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_role_admins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param role_id [Integer] Set to the id of the role you want to return.
    # @param request_body [Array<Integer>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<AddRoleUsers200ResponseInner>]
    def add_role_users(authorization, role_id, request_body, opts = {})
      data, _status_code, _headers = add_role_users_with_http_info(authorization, role_id, request_body, opts)
      data
    end

    # @param authorization [String] 
    # @param role_id [Integer] Set to the id of the role you want to return.
    # @param request_body [Array<Integer>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<AddRoleUsers200ResponseInner>, Integer, Hash)>] Array<AddRoleUsers200ResponseInner> data, response status code and response headers
    def add_role_users_with_http_info(authorization, role_id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.add_role_users ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.add_role_users"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling DefaultApi.add_role_users"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling DefaultApi.add_role_users"
      end
      # resource path
      local_var_path = '/api/2/roles/{role_id}/users'.sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<AddRoleUsers200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.add_role_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_role_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param add_scope_request [AddScopeRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Id]
    def add_scope(authorization, id, add_scope_request, opts = {})
      data, _status_code, _headers = add_scope_with_http_info(authorization, id, add_scope_request, opts)
      data
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param add_scope_request [AddScopeRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Id, Integer, Hash)>] Id data, response status code and response headers
    def add_scope_with_http_info(authorization, id, add_scope_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.add_scope ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.add_scope"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.add_scope"
      end
      # verify the required parameter 'add_scope_request' is set
      if @api_client.config.client_side_validation && add_scope_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_scope_request' when calling DefaultApi.add_scope"
      end
      # resource path
      local_var_path = '/api/2/api_authorizations/{id}/scopes'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_scope_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Id'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.add_scope",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#add_scope\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param request_body [Array<Integer>] The request body must contain an array of User Mapping IDs in the desired order.
    # @param [Hash] opts the optional parameters
    # @return [Array<Integer>]
    def bulk_mapping_sort(authorization, request_body, opts = {})
      data, _status_code, _headers = bulk_mapping_sort_with_http_info(authorization, request_body, opts)
      data
    end

    # @param authorization [String] 
    # @param request_body [Array<Integer>] The request body must contain an array of User Mapping IDs in the desired order.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Integer>, Integer, Hash)>] Array<Integer> data, response status code and response headers
    def bulk_mapping_sort_with_http_info(authorization, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.bulk_mapping_sort ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.bulk_mapping_sort"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling DefaultApi.bulk_mapping_sort"
      end
      # resource path
      local_var_path = '/api/2/apps/mappings/sort'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Integer>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.bulk_mapping_sort",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#bulk_mapping_sort\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param request_body [Array<Integer>] The request body must contain an array of App Rule IDs in the desired order.
    # @param [Hash] opts the optional parameters
    # @return [Array<Integer>]
    def bulk_sort(authorization, app_id, request_body, opts = {})
      data, _status_code, _headers = bulk_sort_with_http_info(authorization, app_id, request_body, opts)
      data
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param request_body [Array<Integer>] The request body must contain an array of App Rule IDs in the desired order.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Integer>, Integer, Hash)>] Array<Integer> data, response status code and response headers
    def bulk_sort_with_http_info(authorization, app_id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.bulk_sort ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.bulk_sort"
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling DefaultApi.bulk_sort"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling DefaultApi.bulk_sort"
      end
      # resource path
      local_var_path = '/api/2/apps/{app_id}/rules/sort'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Integer>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.bulk_sort",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#bulk_sort\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param schema [Schema] 
    # @param [Hash] opts the optional parameters
    # @return [Schema]
    def create_app(authorization, schema, opts = {})
      data, _status_code, _headers = create_app_with_http_info(authorization, schema, opts)
      data
    end

    # @param authorization [String] 
    # @param schema [Schema] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Schema, Integer, Hash)>] Schema data, response status code and response headers
    def create_app_with_http_info(authorization, schema, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_app ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.create_app"
      end
      # verify the required parameter 'schema' is set
      if @api_client.config.client_side_validation && schema.nil?
        fail ArgumentError, "Missing the required parameter 'schema' when calling DefaultApi.create_app"
      end
      # resource path
      local_var_path = '/api/2/apps'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(schema)

      # return_type
      return_type = opts[:debug_return_type] || 'Schema'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.create_app",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param create_authorization_server_request [CreateAuthorizationServerRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Id]
    def create_authorization_server(authorization, create_authorization_server_request, opts = {})
      data, _status_code, _headers = create_authorization_server_with_http_info(authorization, create_authorization_server_request, opts)
      data
    end

    # @param authorization [String] 
    # @param create_authorization_server_request [CreateAuthorizationServerRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Id, Integer, Hash)>] Id data, response status code and response headers
    def create_authorization_server_with_http_info(authorization, create_authorization_server_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_authorization_server ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.create_authorization_server"
      end
      # verify the required parameter 'create_authorization_server_request' is set
      if @api_client.config.client_side_validation && create_authorization_server_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_authorization_server_request' when calling DefaultApi.create_authorization_server"
      end
      # resource path
      local_var_path = '/api/2/api_authorizations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_authorization_server_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Id'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.create_authorization_server",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_authorization_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param create_environment_variable_request [CreateEnvironmentVariableRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Envvar]
    def create_environment_variable(authorization, create_environment_variable_request, opts = {})
      data, _status_code, _headers = create_environment_variable_with_http_info(authorization, create_environment_variable_request, opts)
      data
    end

    # @param authorization [String] 
    # @param create_environment_variable_request [CreateEnvironmentVariableRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Envvar, Integer, Hash)>] Envvar data, response status code and response headers
    def create_environment_variable_with_http_info(authorization, create_environment_variable_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_environment_variable ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.create_environment_variable"
      end
      # verify the required parameter 'create_environment_variable_request' is set
      if @api_client.config.client_side_validation && create_environment_variable_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_environment_variable_request' when calling DefaultApi.create_environment_variable"
      end
      # resource path
      local_var_path = '/api/2/hooks/envs'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_environment_variable_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Envvar'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.create_environment_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_environment_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param hook [Hook] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_hook(authorization, hook, opts = {})
      create_hook_with_http_info(authorization, hook, opts)
      nil
    end

    # @param authorization [String] 
    # @param hook [Hook] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_hook_with_http_info(authorization, hook, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_hook ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.create_hook"
      end
      # verify the required parameter 'hook' is set
      if @api_client.config.client_side_validation && hook.nil?
        fail ArgumentError, "Missing the required parameter 'hook' when calling DefaultApi.create_hook"
      end
      # resource path
      local_var_path = '/api/2/hooks'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(hook)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.create_hook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_hook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param mapping [Mapping] 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def create_mapping(authorization, mapping, opts = {})
      data, _status_code, _headers = create_mapping_with_http_info(authorization, mapping, opts)
      data
    end

    # @param authorization [String] 
    # @param mapping [Mapping] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def create_mapping_with_http_info(authorization, mapping, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_mapping ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.create_mapping"
      end
      # verify the required parameter 'mapping' is set
      if @api_client.config.client_side_validation && mapping.nil?
        fail ArgumentError, "Missing the required parameter 'mapping' when calling DefaultApi.create_mapping"
      end
      # resource path
      local_var_path = '/api/2/mappings'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(mapping)

      # return_type
      return_type = opts[:debug_return_type] || 'Integer'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.create_mapping",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param risk_rule [RiskRule] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def create_risk_rule(authorization, risk_rule, opts = {})
      create_risk_rule_with_http_info(authorization, risk_rule, opts)
      nil
    end

    # @param authorization [String] 
    # @param risk_rule [RiskRule] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def create_risk_rule_with_http_info(authorization, risk_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_risk_rule ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.create_risk_rule"
      end
      # verify the required parameter 'risk_rule' is set
      if @api_client.config.client_side_validation && risk_rule.nil?
        fail ArgumentError, "Missing the required parameter 'risk_rule' when calling DefaultApi.create_risk_rule"
      end
      # resource path
      local_var_path = '/api/2/risk/rules'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(risk_rule)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.create_risk_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_risk_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<CreateRoles201ResponseInner>]
    def create_roles(authorization, opts = {})
      data, _status_code, _headers = create_roles_with_http_info(authorization, opts)
      data
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<CreateRoles201ResponseInner>, Integer, Hash)>] Array<CreateRoles201ResponseInner> data, response status code and response headers
    def create_roles_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_roles ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.create_roles"
      end
      # resource path
      local_var_path = '/api/2/roles'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<CreateRoles201ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.create_roles",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param rule [Rule] 
    # @param [Hash] opts the optional parameters
    # @return [RuleId]
    def create_rule(authorization, app_id, rule, opts = {})
      data, _status_code, _headers = create_rule_with_http_info(authorization, app_id, rule, opts)
      data
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param rule [Rule] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RuleId, Integer, Hash)>] RuleId data, response status code and response headers
    def create_rule_with_http_info(authorization, app_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_rule ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.create_rule"
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling DefaultApi.create_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling DefaultApi.create_rule"
      end
      # resource path
      local_var_path = '/api/2/apps/{app_id}/rules'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rule)

      # return_type
      return_type = opts[:debug_return_type] || 'RuleId'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.create_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param user [User] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mappings Controls how mappings will be applied to the user on creation. Defaults to async.
    # @option opts [Boolean] :validate_policy Will passwords validate against the User Policy? Defaults to true.
    # @return [User]
    def create_user(authorization, user, opts = {})
      data, _status_code, _headers = create_user_with_http_info(authorization, user, opts)
      data
    end

    # @param authorization [String] 
    # @param user [User] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mappings Controls how mappings will be applied to the user on creation. Defaults to async.
    # @option opts [Boolean] :validate_policy Will passwords validate against the User Policy? Defaults to true.
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def create_user_with_http_info(authorization, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.create_user ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.create_user"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.create_user"
      end
      allowable_values = ["async", "sync", "disabled"]
      if @api_client.config.client_side_validation && opts[:'mappings'] && !allowable_values.include?(opts[:'mappings'])
        fail ArgumentError, "invalid value for \"mappings\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/2/users'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'mappings'] = opts[:'mappings'] if !opts[:'mappings'].nil?
      query_params[:'validate_policy'] = opts[:'validate_policy'] if !opts[:'validate_policy'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user)

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.create_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#create_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param claim_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_access_token_claim(authorization, id, claim_id, opts = {})
      delete_access_token_claim_with_http_info(authorization, id, claim_id, opts)
      nil
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param claim_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_access_token_claim_with_http_info(authorization, id, claim_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_access_token_claim ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.delete_access_token_claim"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.delete_access_token_claim"
      end
      # verify the required parameter 'claim_id' is set
      if @api_client.config.client_side_validation && claim_id.nil?
        fail ArgumentError, "Missing the required parameter 'claim_id' when calling DefaultApi.delete_access_token_claim"
      end
      # resource path
      local_var_path = '/api/2/api_authorizations/{id}/claims/{claim_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'claim_id' + '}', CGI.escape(claim_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_access_token_claim",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_access_token_claim\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_app(authorization, app_id, opts = {})
      delete_app_with_http_info(authorization, app_id, opts)
      nil
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_app_with_http_info(authorization, app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_app ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.delete_app"
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling DefaultApi.delete_app"
      end
      # resource path
      local_var_path = '/api/2/apps/{app_id}'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_app",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param parameter_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_app_parameter(authorization, app_id, parameter_id, opts = {})
      delete_app_parameter_with_http_info(authorization, app_id, parameter_id, opts)
      nil
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param parameter_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_app_parameter_with_http_info(authorization, app_id, parameter_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_app_parameter ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.delete_app_parameter"
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling DefaultApi.delete_app_parameter"
      end
      # verify the required parameter 'parameter_id' is set
      if @api_client.config.client_side_validation && parameter_id.nil?
        fail ArgumentError, "Missing the required parameter 'parameter_id' when calling DefaultApi.delete_app_parameter"
      end
      # resource path
      local_var_path = '/api/2/apps/{app_id}/parameters/{parameter_id}'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s)).sub('{' + 'parameter_id' + '}', CGI.escape(parameter_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_app_parameter",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_app_parameter\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_authorization_server(authorization, id, opts = {})
      delete_authorization_server_with_http_info(authorization, id, opts)
      nil
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_authorization_server_with_http_info(authorization, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_authorization_server ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.delete_authorization_server"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.delete_authorization_server"
      end
      # resource path
      local_var_path = '/api/2/api_authorizations/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_authorization_server",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_authorization_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param envvar_id [String] Set to the id of the Hook Environment Variable that you want to fetch.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_environment_variable(authorization, envvar_id, opts = {})
      delete_environment_variable_with_http_info(authorization, envvar_id, opts)
      nil
    end

    # @param authorization [String] 
    # @param envvar_id [String] Set to the id of the Hook Environment Variable that you want to fetch.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_environment_variable_with_http_info(authorization, envvar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_environment_variable ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.delete_environment_variable"
      end
      # verify the required parameter 'envvar_id' is set
      if @api_client.config.client_side_validation && envvar_id.nil?
        fail ArgumentError, "Missing the required parameter 'envvar_id' when calling DefaultApi.delete_environment_variable"
      end
      # resource path
      local_var_path = '/api/2/hooks/envs/{envvar_id}'.sub('{' + 'envvar_id' + '}', CGI.escape(envvar_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_environment_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_environment_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user.
    # @param device_id [Integer] Set to the device_id of the MFA device.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_factor(authorization, user_id, device_id, opts = {})
      delete_factor_with_http_info(authorization, user_id, device_id, opts)
      nil
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user.
    # @param device_id [Integer] Set to the device_id of the MFA device.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_factor_with_http_info(authorization, user_id, device_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_factor ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.delete_factor"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.delete_factor"
      end
      # verify the required parameter 'device_id' is set
      if @api_client.config.client_side_validation && device_id.nil?
        fail ArgumentError, "Missing the required parameter 'device_id' when calling DefaultApi.delete_factor"
      end
      # resource path
      local_var_path = '/api/2/mfa/users/{user_id}/devices/{device_id}'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s)).sub('{' + 'device_id' + '}', CGI.escape(device_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_factor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_factor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param hook_id [String] Set to the id of the Hook that you want to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_hook(authorization, hook_id, opts = {})
      delete_hook_with_http_info(authorization, hook_id, opts)
      nil
    end

    # @param authorization [String] 
    # @param hook_id [String] Set to the id of the Hook that you want to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_hook_with_http_info(authorization, hook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_hook ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.delete_hook"
      end
      # verify the required parameter 'hook_id' is set
      if @api_client.config.client_side_validation && hook_id.nil?
        fail ArgumentError, "Missing the required parameter 'hook_id' when calling DefaultApi.delete_hook"
      end
      # resource path
      local_var_path = '/api/2/hooks/{hook_id}'.sub('{' + 'hook_id' + '}', CGI.escape(hook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_hook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_hook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param mapping_id [Integer] The id of the user mapping to locate.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_mapping(authorization, mapping_id, opts = {})
      delete_mapping_with_http_info(authorization, mapping_id, opts)
      nil
    end

    # @param authorization [String] 
    # @param mapping_id [Integer] The id of the user mapping to locate.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_mapping_with_http_info(authorization, mapping_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_mapping ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.delete_mapping"
      end
      # verify the required parameter 'mapping_id' is set
      if @api_client.config.client_side_validation && mapping_id.nil?
        fail ArgumentError, "Missing the required parameter 'mapping_id' when calling DefaultApi.delete_mapping"
      end
      # resource path
      local_var_path = '/api/2/mappings/{mapping_id}'.sub('{' + 'mapping_id' + '}', CGI.escape(mapping_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_mapping",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param risk_rule_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [RiskRule]
    def delete_risk_rule(authorization, risk_rule_id, opts = {})
      data, _status_code, _headers = delete_risk_rule_with_http_info(authorization, risk_rule_id, opts)
      data
    end

    # @param authorization [String] 
    # @param risk_rule_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RiskRule, Integer, Hash)>] RiskRule data, response status code and response headers
    def delete_risk_rule_with_http_info(authorization, risk_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_risk_rule ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.delete_risk_rule"
      end
      # verify the required parameter 'risk_rule_id' is set
      if @api_client.config.client_side_validation && risk_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'risk_rule_id' when calling DefaultApi.delete_risk_rule"
      end
      # resource path
      local_var_path = '/api/2/risk/rules/{risk_rule_id}'.sub('{' + 'risk_rule_id' + '}', CGI.escape(risk_rule_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'RiskRule'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_risk_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_risk_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param role_id [Integer] Set to the id of the role you want to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_role(authorization, role_id, opts = {})
      delete_role_with_http_info(authorization, role_id, opts)
      nil
    end

    # @param authorization [String] 
    # @param role_id [Integer] Set to the id of the role you want to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_role_with_http_info(authorization, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_role ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.delete_role"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling DefaultApi.delete_role"
      end
      # resource path
      local_var_path = '/api/2/roles/{role_id}'.sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param rule_id [Integer] The id of the app rule to locate.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_rule(authorization, app_id, rule_id, opts = {})
      delete_rule_with_http_info(authorization, app_id, rule_id, opts)
      nil
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param rule_id [Integer] The id of the app rule to locate.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_rule_with_http_info(authorization, app_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_rule ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.delete_rule"
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling DefaultApi.delete_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling DefaultApi.delete_rule"
      end
      # resource path
      local_var_path = '/api/2/apps/{app_id}/rules/{rule_id}'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s)).sub('{' + 'rule_id' + '}', CGI.escape(rule_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param scope_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_scope(authorization, id, scope_id, opts = {})
      delete_scope_with_http_info(authorization, id, scope_id, opts)
      nil
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param scope_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_scope_with_http_info(authorization, id, scope_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_scope ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.delete_scope"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.delete_scope"
      end
      # verify the required parameter 'scope_id' is set
      if @api_client.config.client_side_validation && scope_id.nil?
        fail ArgumentError, "Missing the required parameter 'scope_id' when calling DefaultApi.delete_scope"
      end
      # resource path
      local_var_path = '/api/2/api_authorizations/{id}/scopes/{scope_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'scope_id' + '}', CGI.escape(scope_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_scope",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_scope\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user that you want to return.
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_user(authorization, user_id, opts = {})
      delete_user_with_http_info(authorization, user_id, opts)
      nil
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user that you want to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_user_with_http_info(authorization, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.delete_user ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.delete_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.delete_user"
      end
      # resource path
      local_var_path = '/api/2/users/{user_id}'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.delete_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#delete_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param mapping_id [Integer] The id of the user mapping to locate.
    # @param request_body [Array<Integer>] Request body is a list of user IDs tested against the mapping conditions to verify that the mapping would be applied
    # @param [Hash] opts the optional parameters
    # @return [Array<Object>]
    def dry_run_mapping(authorization, mapping_id, request_body, opts = {})
      data, _status_code, _headers = dry_run_mapping_with_http_info(authorization, mapping_id, request_body, opts)
      data
    end

    # @param authorization [String] 
    # @param mapping_id [Integer] The id of the user mapping to locate.
    # @param request_body [Array<Integer>] Request body is a list of user IDs tested against the mapping conditions to verify that the mapping would be applied
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Object>, Integer, Hash)>] Array<Object> data, response status code and response headers
    def dry_run_mapping_with_http_info(authorization, mapping_id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.dry_run_mapping ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.dry_run_mapping"
      end
      # verify the required parameter 'mapping_id' is set
      if @api_client.config.client_side_validation && mapping_id.nil?
        fail ArgumentError, "Missing the required parameter 'mapping_id' when calling DefaultApi.dry_run_mapping"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling DefaultApi.dry_run_mapping"
      end
      # resource path
      local_var_path = '/api/2/mappings/{mapping_id}/dryrun'.sub('{' + 'mapping_id' + '}', CGI.escape(mapping_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Object>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.dry_run_mapping",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#dry_run_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user.
    # @param enroll_factor_request [EnrollFactorRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Array>]
    def enroll_factor(authorization, user_id, enroll_factor_request, opts = {})
      data, _status_code, _headers = enroll_factor_with_http_info(authorization, user_id, enroll_factor_request, opts)
      data
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user.
    # @param enroll_factor_request [EnrollFactorRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Array>, Integer, Hash)>] Array<Array> data, response status code and response headers
    def enroll_factor_with_http_info(authorization, user_id, enroll_factor_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.enroll_factor ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.enroll_factor"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.enroll_factor"
      end
      # verify the required parameter 'enroll_factor_request' is set
      if @api_client.config.client_side_validation && enroll_factor_request.nil?
        fail ArgumentError, "Missing the required parameter 'enroll_factor_request' when calling DefaultApi.enroll_factor"
      end
      # resource path
      local_var_path = '/api/2/mfa/users/{user_id}/registrations'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(enroll_factor_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Array>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.enroll_factor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#enroll_factor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param generate_mfa_token_request [GenerateMfaTokenRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GenerateMfaToken200Response]
    def generate_mfa_token(authorization, generate_mfa_token_request, opts = {})
      data, _status_code, _headers = generate_mfa_token_with_http_info(authorization, generate_mfa_token_request, opts)
      data
    end

    # @param authorization [String] 
    # @param generate_mfa_token_request [GenerateMfaTokenRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenerateMfaToken200Response, Integer, Hash)>] GenerateMfaToken200Response data, response status code and response headers
    def generate_mfa_token_with_http_info(authorization, generate_mfa_token_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.generate_mfa_token ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.generate_mfa_token"
      end
      # verify the required parameter 'generate_mfa_token_request' is set
      if @api_client.config.client_side_validation && generate_mfa_token_request.nil?
        fail ArgumentError, "Missing the required parameter 'generate_mfa_token_request' when calling DefaultApi.generate_mfa_token"
      end
      # resource path
      local_var_path = '/api/2/mfs/users/{user_id}/mfa_token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(generate_mfa_token_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GenerateMfaToken200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.generate_mfa_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#generate_mfa_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param generate_saml_assertion_request [GenerateSamlAssertionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def generate_saml_assertion(authorization, generate_saml_assertion_request, opts = {})
      generate_saml_assertion_with_http_info(authorization, generate_saml_assertion_request, opts)
      nil
    end

    # @param authorization [String] 
    # @param generate_saml_assertion_request [GenerateSamlAssertionRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def generate_saml_assertion_with_http_info(authorization, generate_saml_assertion_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.generate_saml_assertion ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.generate_saml_assertion"
      end
      # verify the required parameter 'generate_saml_assertion_request' is set
      if @api_client.config.client_side_validation && generate_saml_assertion_request.nil?
        fail ArgumentError, "Missing the required parameter 'generate_saml_assertion_request' when calling DefaultApi.generate_saml_assertion"
      end
      # resource path
      local_var_path = '/api/2/saml_assertion'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(generate_saml_assertion_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.generate_saml_assertion",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#generate_saml_assertion\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param generate_token_request [GenerateTokenRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GenerateToken200Response]
    def generate_token(authorization, generate_token_request, opts = {})
      data, _status_code, _headers = generate_token_with_http_info(authorization, generate_token_request, opts)
      data
    end

    # @param authorization [String] 
    # @param generate_token_request [GenerateTokenRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GenerateToken200Response, Integer, Hash)>] GenerateToken200Response data, response status code and response headers
    def generate_token_with_http_info(authorization, generate_token_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.generate_token ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.generate_token"
      end
      # verify the required parameter 'generate_token_request' is set
      if @api_client.config.client_side_validation && generate_token_request.nil?
        fail ArgumentError, "Missing the required parameter 'generate_token_request' when calling DefaultApi.generate_token"
      end
      # resource path
      local_var_path = '/auth/oauth2/v2/token'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(generate_token_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GenerateToken200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.generate_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#generate_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Schema]
    def get_app(authorization, app_id, opts = {})
      data, _status_code, _headers = get_app_with_http_info(authorization, app_id, opts)
      data
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Schema, Integer, Hash)>] Schema data, response status code and response headers
    def get_app_with_http_info(authorization, app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_app ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.get_app"
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling DefaultApi.get_app"
      end
      # resource path
      local_var_path = '/api/2/apps/{app_id}'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Schema'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_app",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [GetAuthorizationServer200Response]
    def get_authorization_server(authorization, id, opts = {})
      data, _status_code, _headers = get_authorization_server_with_http_info(authorization, id, opts)
      data
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetAuthorizationServer200Response, Integer, Hash)>] GetAuthorizationServer200Response data, response status code and response headers
    def get_authorization_server_with_http_info(authorization, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_authorization_server ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.get_authorization_server"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_authorization_server"
      end
      # resource path
      local_var_path = '/api/2/api_authorizations/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetAuthorizationServer200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_authorization_server",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_authorization_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<GetAvailableFactors200ResponseInner>]
    def get_available_factors(authorization, user_id, opts = {})
      data, _status_code, _headers = get_available_factors_with_http_info(authorization, user_id, opts)
      data
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<GetAvailableFactors200ResponseInner>, Integer, Hash)>] Array<GetAvailableFactors200ResponseInner> data, response status code and response headers
    def get_available_factors_with_http_info(authorization, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_available_factors ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.get_available_factors"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.get_available_factors"
      end
      # resource path
      local_var_path = '/api/2/mfa/users/{user_id}/factors'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetAvailableFactors200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_available_factors",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_available_factors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<GetClientApps200ResponseInner>]
    def get_client_apps(authorization, id, opts = {})
      data, _status_code, _headers = get_client_apps_with_http_info(authorization, id, opts)
      data
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<GetClientApps200ResponseInner>, Integer, Hash)>] Array<GetClientApps200ResponseInner> data, response status code and response headers
    def get_client_apps_with_http_info(authorization, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_client_apps ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.get_client_apps"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.get_client_apps"
      end
      # resource path
      local_var_path = '/api/2/api_authorizations/{id}/clients'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetClientApps200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_client_apps",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_client_apps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<Device>]
    def get_enrolled_factors(authorization, user_id, opts = {})
      data, _status_code, _headers = get_enrolled_factors_with_http_info(authorization, user_id, opts)
      data
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Device>, Integer, Hash)>] Array<Device> data, response status code and response headers
    def get_enrolled_factors_with_http_info(authorization, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_enrolled_factors ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.get_enrolled_factors"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.get_enrolled_factors"
      end
      # resource path
      local_var_path = '/api/2/mfa/users/{user_id}/devices'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Device>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_enrolled_factors",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_enrolled_factors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param envvar_id [String] Set to the id of the Hook Environment Variable that you want to fetch.
    # @param [Hash] opts the optional parameters
    # @return [Envvar]
    def get_environment_variable(authorization, envvar_id, opts = {})
      data, _status_code, _headers = get_environment_variable_with_http_info(authorization, envvar_id, opts)
      data
    end

    # @param authorization [String] 
    # @param envvar_id [String] Set to the id of the Hook Environment Variable that you want to fetch.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Envvar, Integer, Hash)>] Envvar data, response status code and response headers
    def get_environment_variable_with_http_info(authorization, envvar_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_environment_variable ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.get_environment_variable"
      end
      # verify the required parameter 'envvar_id' is set
      if @api_client.config.client_side_validation && envvar_id.nil?
        fail ArgumentError, "Missing the required parameter 'envvar_id' when calling DefaultApi.get_environment_variable"
      end
      # resource path
      local_var_path = '/api/2/hooks/envs/{envvar_id}'.sub('{' + 'envvar_id' + '}', CGI.escape(envvar_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Envvar'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_environment_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_environment_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param hook_id [String] Set to the id of the Hook that you want to return.
    # @param [Hash] opts the optional parameters
    # @return [Hook]
    def get_hook(authorization, hook_id, opts = {})
      data, _status_code, _headers = get_hook_with_http_info(authorization, hook_id, opts)
      data
    end

    # @param authorization [String] 
    # @param hook_id [String] Set to the id of the Hook that you want to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hook, Integer, Hash)>] Hook data, response status code and response headers
    def get_hook_with_http_info(authorization, hook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_hook ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.get_hook"
      end
      # verify the required parameter 'hook_id' is set
      if @api_client.config.client_side_validation && hook_id.nil?
        fail ArgumentError, "Missing the required parameter 'hook_id' when calling DefaultApi.get_hook"
      end
      # resource path
      local_var_path = '/api/2/hooks/{hook_id}'.sub('{' + 'hook_id' + '}', CGI.escape(hook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Hook'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_hook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_hook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param hook_id [String] Set to the id of the Hook that you want to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
    # @option opts [Integer] :page The page number of results to return.
    # @option opts [String] :cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
    # @option opts [String] :request_id Returns logs that contain this request_id.
    # @option opts [String] :correlation_id Returns logs that contain this correlation_id.
    # @return [Array<Log>]
    def get_logs(authorization, hook_id, opts = {})
      data, _status_code, _headers = get_logs_with_http_info(authorization, hook_id, opts)
      data
    end

    # @param authorization [String] 
    # @param hook_id [String] Set to the id of the Hook that you want to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
    # @option opts [Integer] :page The page number of results to return.
    # @option opts [String] :cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
    # @option opts [String] :request_id Returns logs that contain this request_id.
    # @option opts [String] :correlation_id Returns logs that contain this correlation_id.
    # @return [Array<(Array<Log>, Integer, Hash)>] Array<Log> data, response status code and response headers
    def get_logs_with_http_info(authorization, hook_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_logs ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.get_logs"
      end
      # verify the required parameter 'hook_id' is set
      if @api_client.config.client_side_validation && hook_id.nil?
        fail ArgumentError, "Missing the required parameter 'hook_id' when calling DefaultApi.get_logs"
      end
      # resource path
      local_var_path = '/api/2/hooks/{hook_id}/logs'.sub('{' + 'hook_id' + '}', CGI.escape(hook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'request_id'] = opts[:'request_id'] if !opts[:'request_id'].nil?
      query_params[:'correlation_id'] = opts[:'correlation_id'] if !opts[:'correlation_id'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Log>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_logs",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_logs\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param mapping_id [Integer] The id of the user mapping to locate.
    # @param [Hash] opts the optional parameters
    # @return [Mapping]
    def get_mapping(authorization, mapping_id, opts = {})
      data, _status_code, _headers = get_mapping_with_http_info(authorization, mapping_id, opts)
      data
    end

    # @param authorization [String] 
    # @param mapping_id [Integer] The id of the user mapping to locate.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Mapping, Integer, Hash)>] Mapping data, response status code and response headers
    def get_mapping_with_http_info(authorization, mapping_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_mapping ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.get_mapping"
      end
      # verify the required parameter 'mapping_id' is set
      if @api_client.config.client_side_validation && mapping_id.nil?
        fail ArgumentError, "Missing the required parameter 'mapping_id' when calling DefaultApi.get_mapping"
      end
      # resource path
      local_var_path = '/api/2/mappings/{mapping_id}'.sub('{' + 'mapping_id' + '}', CGI.escape(mapping_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Mapping'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_mapping",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @return [GetRateLimit200Response]
    def get_rate_limit(authorization, opts = {})
      data, _status_code, _headers = get_rate_limit_with_http_info(authorization, opts)
      data
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetRateLimit200Response, Integer, Hash)>] GetRateLimit200Response data, response status code and response headers
    def get_rate_limit_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_rate_limit ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.get_rate_limit"
      end
      # resource path
      local_var_path = '/auth/rate_limit'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetRateLimit200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_rate_limit",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_rate_limit\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param risk_rule_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def get_risk_rule(authorization, risk_rule_id, opts = {})
      get_risk_rule_with_http_info(authorization, risk_rule_id, opts)
      nil
    end

    # @param authorization [String] 
    # @param risk_rule_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def get_risk_rule_with_http_info(authorization, risk_rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_risk_rule ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.get_risk_rule"
      end
      # verify the required parameter 'risk_rule_id' is set
      if @api_client.config.client_side_validation && risk_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'risk_rule_id' when calling DefaultApi.get_risk_rule"
      end
      # resource path
      local_var_path = '/api/2/risk/rules/{risk_rule_id}'.sub('{' + 'risk_rule_id' + '}', CGI.escape(risk_rule_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_risk_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_risk_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param get_risk_score_request [GetRiskScoreRequest] 
    # @param [Hash] opts the optional parameters
    # @return [GetRiskScore200Response]
    def get_risk_score(authorization, get_risk_score_request, opts = {})
      data, _status_code, _headers = get_risk_score_with_http_info(authorization, get_risk_score_request, opts)
      data
    end

    # @param authorization [String] 
    # @param get_risk_score_request [GetRiskScoreRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(GetRiskScore200Response, Integer, Hash)>] GetRiskScore200Response data, response status code and response headers
    def get_risk_score_with_http_info(authorization, get_risk_score_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_risk_score ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.get_risk_score"
      end
      # verify the required parameter 'get_risk_score_request' is set
      if @api_client.config.client_side_validation && get_risk_score_request.nil?
        fail ArgumentError, "Missing the required parameter 'get_risk_score_request' when calling DefaultApi.get_risk_score"
      end
      # resource path
      local_var_path = '/api/2/risk/verify'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(get_risk_score_request)

      # return_type
      return_type = opts[:debug_return_type] || 'GetRiskScore200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_risk_score",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_risk_score\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param role_id [Integer] Set to the id of the role you want to return.
    # @param [Hash] opts the optional parameters
    # @return [Role]
    def get_role(authorization, role_id, opts = {})
      data, _status_code, _headers = get_role_with_http_info(authorization, role_id, opts)
      data
    end

    # @param authorization [String] 
    # @param role_id [Integer] Set to the id of the role you want to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Role, Integer, Hash)>] Role data, response status code and response headers
    def get_role_with_http_info(authorization, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_role ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.get_role"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling DefaultApi.get_role"
      end
      # resource path
      local_var_path = '/api/2/roles/{role_id}'.sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Role'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param role_id [Integer] Set to the id of the role you want to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
    # @option opts [Integer] :page The page number of results to return.
    # @option opts [String] :cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
    # @option opts [String] :name Allows you to filter on first name, last name, username, and email address.
    # @option opts [Boolean] :include_unassigned Optional. Defaults to false. Include users that aren’t assigned to the role.
    # @return [Array<Schema1>]
    def get_role_admins(authorization, role_id, opts = {})
      data, _status_code, _headers = get_role_admins_with_http_info(authorization, role_id, opts)
      data
    end

    # @param authorization [String] 
    # @param role_id [Integer] Set to the id of the role you want to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
    # @option opts [Integer] :page The page number of results to return.
    # @option opts [String] :cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
    # @option opts [String] :name Allows you to filter on first name, last name, username, and email address.
    # @option opts [Boolean] :include_unassigned Optional. Defaults to false. Include users that aren’t assigned to the role.
    # @return [Array<(Array<Schema1>, Integer, Hash)>] Array<Schema1> data, response status code and response headers
    def get_role_admins_with_http_info(authorization, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_role_admins ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.get_role_admins"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling DefaultApi.get_role_admins"
      end
      # resource path
      local_var_path = '/api/2/roles/{role_id}/admins'.sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'include_unassigned'] = opts[:'include_unassigned'] if !opts[:'include_unassigned'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['applcation/json', 'application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Schema1>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_role_admins",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_role_admins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param role_id [Integer] Set to the id of the role you want to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
    # @option opts [Integer] :page The page number of results to return.
    # @option opts [String] :cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
    # @option opts [Boolean] :assigned Optional. Defaults to true. Returns all apps not yet assigned to the role.
    # @return [Array<Schema>]
    def get_role_apps(authorization, role_id, opts = {})
      data, _status_code, _headers = get_role_apps_with_http_info(authorization, role_id, opts)
      data
    end

    # @param authorization [String] 
    # @param role_id [Integer] Set to the id of the role you want to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
    # @option opts [Integer] :page The page number of results to return.
    # @option opts [String] :cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
    # @option opts [Boolean] :assigned Optional. Defaults to true. Returns all apps not yet assigned to the role.
    # @return [Array<(Array<Schema>, Integer, Hash)>] Array<Schema> data, response status code and response headers
    def get_role_apps_with_http_info(authorization, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_role_apps ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.get_role_apps"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling DefaultApi.get_role_apps"
      end
      # resource path
      local_var_path = '/api/2/roles/{role_id}/apps'.sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'assigned'] = opts[:'assigned'] if !opts[:'assigned'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['applcation/json', 'application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Schema>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_role_apps",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_role_apps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param role_id [Integer] Set to the id of the role you want to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
    # @option opts [Integer] :page The page number of results to return.
    # @option opts [String] :cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
    # @option opts [String] :name Allows you to filter on first name, last name, username, and email address.
    # @option opts [Boolean] :include_unassigned Optional. Defaults to false. Include users that aren’t assigned to the role.
    # @return [Array<Schema1>]
    def get_role_users(authorization, role_id, opts = {})
      data, _status_code, _headers = get_role_users_with_http_info(authorization, role_id, opts)
      data
    end

    # @param authorization [String] 
    # @param role_id [Integer] Set to the id of the role you want to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
    # @option opts [Integer] :page The page number of results to return.
    # @option opts [String] :cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
    # @option opts [String] :name Allows you to filter on first name, last name, username, and email address.
    # @option opts [Boolean] :include_unassigned Optional. Defaults to false. Include users that aren’t assigned to the role.
    # @return [Array<(Array<Schema1>, Integer, Hash)>] Array<Schema1> data, response status code and response headers
    def get_role_users_with_http_info(authorization, role_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_role_users ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.get_role_users"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling DefaultApi.get_role_users"
      end
      # resource path
      local_var_path = '/api/2/roles/{role_id}/users'.sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'include_unassigned'] = opts[:'include_unassigned'] if !opts[:'include_unassigned'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['applcation/json', 'application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Schema1>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_role_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_role_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param rule_id [Integer] The id of the app rule to locate.
    # @param [Hash] opts the optional parameters
    # @return [Rule]
    def get_rule(authorization, app_id, rule_id, opts = {})
      data, _status_code, _headers = get_rule_with_http_info(authorization, app_id, rule_id, opts)
      data
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param rule_id [Integer] The id of the app rule to locate.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Rule, Integer, Hash)>] Rule data, response status code and response headers
    def get_rule_with_http_info(authorization, app_id, rule_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_rule ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.get_rule"
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling DefaultApi.get_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling DefaultApi.get_rule"
      end
      # resource path
      local_var_path = '/api/2/apps/{app_id}/rules/{rule_id}'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s)).sub('{' + 'rule_id' + '}', CGI.escape(rule_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Rule'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :before Optional ISO8601 formatted date string. Defaults to current date. Maximum date is 90 days ago.
    # @option opts [String] :after Optional ISO8601 formatted date string. Defaults to 30 days ago. Maximum date is 90 days ago.
    # @return [GetScoreInsights200Response]
    def get_score_insights(authorization, opts = {})
      data, _status_code, _headers = get_score_insights_with_http_info(authorization, opts)
      data
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :before Optional ISO8601 formatted date string. Defaults to current date. Maximum date is 90 days ago.
    # @option opts [String] :after Optional ISO8601 formatted date string. Defaults to 30 days ago. Maximum date is 90 days ago.
    # @return [Array<(GetScoreInsights200Response, Integer, Hash)>] GetScoreInsights200Response data, response status code and response headers
    def get_score_insights_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_score_insights ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.get_score_insights"
      end
      # resource path
      local_var_path = '/api/2/risk/scores'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'before'] = opts[:'before'] if !opts[:'before'].nil?
      query_params[:'after'] = opts[:'after'] if !opts[:'after'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'GetScoreInsights200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_score_insights",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_score_insights\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user that you want to return.
    # @param [Hash] opts the optional parameters
    # @return [User]
    def get_user(authorization, user_id, opts = {})
      data, _status_code, _headers = get_user_with_http_info(authorization, user_id, opts)
      data
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user that you want to return.
    # @param [Hash] opts the optional parameters
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def get_user_with_http_info(authorization, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_user ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.get_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.get_user"
      end
      # resource path
      local_var_path = '/api/2/users/{user_id}'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user that you want to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :ignore_visibility Defaults to &#x60;false&#x60;. When &#x60;true&#x60; will show all apps that are assigned to a user regardless of their portal visibility setting.
    # @return [Array<GetUserApps200ResponseInner>]
    def get_user_apps(authorization, user_id, opts = {})
      data, _status_code, _headers = get_user_apps_with_http_info(authorization, user_id, opts)
      data
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user that you want to return.
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :ignore_visibility Defaults to &#x60;false&#x60;. When &#x60;true&#x60; will show all apps that are assigned to a user regardless of their portal visibility setting.
    # @return [Array<(Array<GetUserApps200ResponseInner>, Integer, Hash)>] Array<GetUserApps200ResponseInner> data, response status code and response headers
    def get_user_apps_with_http_info(authorization, user_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.get_user_apps ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.get_user_apps"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.get_user_apps"
      end
      # resource path
      local_var_path = '/api/2/users/{user_id}/apps'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'ignore_visibility'] = opts[:'ignore_visibility'] if !opts[:'ignore_visibility'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<GetUserApps200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.get_user_apps",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#get_user_apps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<ListAccessTokenClaims200ResponseInner>]
    def list_access_token_claims(authorization, id, opts = {})
      data, _status_code, _headers = list_access_token_claims_with_http_info(authorization, id, opts)
      data
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ListAccessTokenClaims200ResponseInner>, Integer, Hash)>] Array<ListAccessTokenClaims200ResponseInner> data, response status code and response headers
    def list_access_token_claims_with_http_info(authorization, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_access_token_claims ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_access_token_claims"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_access_token_claims"
      end
      # resource path
      local_var_path = '/api/2/api_authorizations/{id}/claims'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ListAccessTokenClaims200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_access_token_claims",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_access_token_claims\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param action_value [String] The value for the selected action.
    # @param [Hash] opts the optional parameters
    # @return [Array<ListConditionValues200ResponseInner>]
    def list_action_values(authorization, app_id, action_value, opts = {})
      data, _status_code, _headers = list_action_values_with_http_info(authorization, app_id, action_value, opts)
      data
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param action_value [String] The value for the selected action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ListConditionValues200ResponseInner>, Integer, Hash)>] Array<ListConditionValues200ResponseInner> data, response status code and response headers
    def list_action_values_with_http_info(authorization, app_id, action_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_action_values ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_action_values"
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling DefaultApi.list_action_values"
      end
      # verify the required parameter 'action_value' is set
      if @api_client.config.client_side_validation && action_value.nil?
        fail ArgumentError, "Missing the required parameter 'action_value' when calling DefaultApi.list_action_values"
      end
      # resource path
      local_var_path = '/api/2/apps/{app_id}/rules/actions/{actuion_value}/values'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s)).sub('{' + 'action_value' + '}', CGI.escape(action_value.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ListConditionValues200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_action_values",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_action_values\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<ListActions200ResponseInner>]
    def list_actions(authorization, app_id, opts = {})
      data, _status_code, _headers = list_actions_with_http_info(authorization, app_id, opts)
      data
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ListActions200ResponseInner>, Integer, Hash)>] Array<ListActions200ResponseInner> data, response status code and response headers
    def list_actions_with_http_info(authorization, app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_actions ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_actions"
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling DefaultApi.list_actions"
      end
      # resource path
      local_var_path = '/api/2/apps/{app_id}/rules/actions'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ListActions200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_actions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_actions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
    # @option opts [Integer] :page The page number of results to return.
    # @option opts [String] :cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
    # @return [Array<ListAppUsers200ResponseInner>]
    def list_app_users(authorization, app_id, opts = {})
      data, _status_code, _headers = list_app_users_with_http_info(authorization, app_id, opts)
      data
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
    # @option opts [Integer] :page The page number of results to return.
    # @option opts [String] :cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
    # @return [Array<(Array<ListAppUsers200ResponseInner>, Integer, Hash)>] Array<ListAppUsers200ResponseInner> data, response status code and response headers
    def list_app_users_with_http_info(authorization, app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_app_users ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_app_users"
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling DefaultApi.list_app_users"
      end
      # resource path
      local_var_path = '/api/2/apps/{app_id}/users'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ListAppUsers200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_app_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_app_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
    # @option opts [Integer] :page The page number of results to return.
    # @option opts [String] :cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
    # @option opts [String] :name The name or partial name of the app to search for. When using a partial name you must append a wildcard &#x60;*&#x60;
    # @option opts [Integer] :connector_id Returns all apps based off a specific connector. See List Connectors for a complete list of Connector IDs.
    # @option opts [AuthMethod] :auth_method Returns all apps based of a given type.
    # @return [Array<Schema>]
    def list_apps(authorization, opts = {})
      data, _status_code, _headers = list_apps_with_http_info(authorization, opts)
      data
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
    # @option opts [Integer] :page The page number of results to return.
    # @option opts [String] :cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
    # @option opts [String] :name The name or partial name of the app to search for. When using a partial name you must append a wildcard &#x60;*&#x60;
    # @option opts [Integer] :connector_id Returns all apps based off a specific connector. See List Connectors for a complete list of Connector IDs.
    # @option opts [AuthMethod] :auth_method Returns all apps based of a given type.
    # @return [Array<(Array<Schema>, Integer, Hash)>] Array<Schema> data, response status code and response headers
    def list_apps_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_apps ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_apps"
      end
      # resource path
      local_var_path = '/api/2/apps'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'connector_id'] = opts[:'connector_id'] if !opts[:'connector_id'].nil?
      query_params[:'auth_method'] = opts[:'auth_method'] if !opts[:'auth_method'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Schema>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_apps",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_apps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<ListAuthorizationServers200ResponseInner>]
    def list_authorization_servers(authorization, opts = {})
      data, _status_code, _headers = list_authorization_servers_with_http_info(authorization, opts)
      data
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ListAuthorizationServers200ResponseInner>, Integer, Hash)>] Array<ListAuthorizationServers200ResponseInner> data, response status code and response headers
    def list_authorization_servers_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_authorization_servers ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_authorization_servers"
      end
      # resource path
      local_var_path = '/api/2/api_authorizations'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ListAuthorizationServers200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_authorization_servers",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_authorization_servers\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param condition_value [String] The value for the selected condition.
    # @param [Hash] opts the optional parameters
    # @return [Array<ListConditionOperators200ResponseInner>]
    def list_condition_operators(authorization, app_id, condition_value, opts = {})
      data, _status_code, _headers = list_condition_operators_with_http_info(authorization, app_id, condition_value, opts)
      data
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param condition_value [String] The value for the selected condition.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ListConditionOperators200ResponseInner>, Integer, Hash)>] Array<ListConditionOperators200ResponseInner> data, response status code and response headers
    def list_condition_operators_with_http_info(authorization, app_id, condition_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_condition_operators ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_condition_operators"
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling DefaultApi.list_condition_operators"
      end
      # verify the required parameter 'condition_value' is set
      if @api_client.config.client_side_validation && condition_value.nil?
        fail ArgumentError, "Missing the required parameter 'condition_value' when calling DefaultApi.list_condition_operators"
      end
      # resource path
      local_var_path = '/api/2/apps/{app_id}/rules/conditions/{condition_value}/operators'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s)).sub('{' + 'condition_value' + '}', CGI.escape(condition_value.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ListConditionOperators200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_condition_operators",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_condition_operators\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param condition_value [String] The value for the selected condition.
    # @param [Hash] opts the optional parameters
    # @return [Array<ListConditionValues200ResponseInner>]
    def list_condition_values(authorization, app_id, condition_value, opts = {})
      data, _status_code, _headers = list_condition_values_with_http_info(authorization, app_id, condition_value, opts)
      data
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param condition_value [String] The value for the selected condition.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ListConditionValues200ResponseInner>, Integer, Hash)>] Array<ListConditionValues200ResponseInner> data, response status code and response headers
    def list_condition_values_with_http_info(authorization, app_id, condition_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_condition_values ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_condition_values"
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling DefaultApi.list_condition_values"
      end
      # verify the required parameter 'condition_value' is set
      if @api_client.config.client_side_validation && condition_value.nil?
        fail ArgumentError, "Missing the required parameter 'condition_value' when calling DefaultApi.list_condition_values"
      end
      # resource path
      local_var_path = '/api/2/apps/{app_id}/rules/conditions/{condition_value}/values'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s)).sub('{' + 'condition_value' + '}', CGI.escape(condition_value.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ListConditionValues200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_condition_values",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_condition_values\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<ListConditions200ResponseInner>]
    def list_conditions(authorization, app_id, opts = {})
      data, _status_code, _headers = list_conditions_with_http_info(authorization, app_id, opts)
      data
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ListConditions200ResponseInner>, Integer, Hash)>] Array<ListConditions200ResponseInner> data, response status code and response headers
    def list_conditions_with_http_info(authorization, app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_conditions ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_conditions"
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling DefaultApi.list_conditions"
      end
      # resource path
      local_var_path = '/api/2/apps/{app_id}/rules/conditions'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ListConditions200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_conditions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_conditions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
    # @option opts [Integer] :page The page number of results to return.
    # @option opts [String] :cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
    # @option opts [String] :name The name or partial name of the connector to search for. When using a partial name you must append a wildcard &#x60;*&#x60;
    # @option opts [AuthMethod] :auth_method Returns all connectors of a given type.
    # @return [Array<Connector>]
    def list_connectors(authorization, opts = {})
      data, _status_code, _headers = list_connectors_with_http_info(authorization, opts)
      data
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
    # @option opts [Integer] :page The page number of results to return.
    # @option opts [String] :cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
    # @option opts [String] :name The name or partial name of the connector to search for. When using a partial name you must append a wildcard &#x60;*&#x60;
    # @option opts [AuthMethod] :auth_method Returns all connectors of a given type.
    # @return [Array<(Array<Connector>, Integer, Hash)>] Array<Connector> data, response status code and response headers
    def list_connectors_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_connectors ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_connectors"
      end
      # resource path
      local_var_path = '/api/2/connectors'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'auth_method'] = opts[:'auth_method'] if !opts[:'auth_method'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Connector>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_connectors",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_connectors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
    # @option opts [Integer] :page The page number of results to return.
    # @option opts [String] :cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
    # @return [Array<Envvar>]
    def list_environment_variables(authorization, opts = {})
      data, _status_code, _headers = list_environment_variables_with_http_info(authorization, opts)
      data
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
    # @option opts [Integer] :page The page number of results to return.
    # @option opts [String] :cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
    # @return [Array<(Array<Envvar>, Integer, Hash)>] Array<Envvar> data, response status code and response headers
    def list_environment_variables_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_environment_variables ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_environment_variables"
      end
      # resource path
      local_var_path = '/api/2/hooks/envs'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Envvar>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_environment_variables",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_environment_variables\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
    # @option opts [Integer] :page The page number of results to return.
    # @option opts [String] :cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
    # @return [Array<Hook>]
    def list_hooks(authorization, opts = {})
      data, _status_code, _headers = list_hooks_with_http_info(authorization, opts)
      data
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
    # @option opts [Integer] :page The page number of results to return.
    # @option opts [String] :cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
    # @return [Array<(Array<Hook>, Integer, Hash)>] Array<Hook> data, response status code and response headers
    def list_hooks_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_hooks ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_hooks"
      end
      # resource path
      local_var_path = '/api/2/hooks'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Hook>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_hooks",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_hooks\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param action_value [String] The value for the selected action.
    # @param [Hash] opts the optional parameters
    # @return [Array<ListConditionValues200ResponseInner>]
    def list_mapping_action_values(authorization, action_value, opts = {})
      data, _status_code, _headers = list_mapping_action_values_with_http_info(authorization, action_value, opts)
      data
    end

    # @param authorization [String] 
    # @param action_value [String] The value for the selected action.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ListConditionValues200ResponseInner>, Integer, Hash)>] Array<ListConditionValues200ResponseInner> data, response status code and response headers
    def list_mapping_action_values_with_http_info(authorization, action_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_mapping_action_values ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_mapping_action_values"
      end
      # verify the required parameter 'action_value' is set
      if @api_client.config.client_side_validation && action_value.nil?
        fail ArgumentError, "Missing the required parameter 'action_value' when calling DefaultApi.list_mapping_action_values"
      end
      # resource path
      local_var_path = '/api/2/apps/mappings/actions/{actuion_value}/values'.sub('{' + 'action_value' + '}', CGI.escape(action_value.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ListConditionValues200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_mapping_action_values",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_mapping_action_values\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<ListActions200ResponseInner>]
    def list_mapping_actions(authorization, opts = {})
      data, _status_code, _headers = list_mapping_actions_with_http_info(authorization, opts)
      data
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ListActions200ResponseInner>, Integer, Hash)>] Array<ListActions200ResponseInner> data, response status code and response headers
    def list_mapping_actions_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_mapping_actions ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_mapping_actions"
      end
      # resource path
      local_var_path = '/api/2/apps/mappings/actions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ListActions200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_mapping_actions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_mapping_actions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param condition_value [String] The value for the selected condition.
    # @param [Hash] opts the optional parameters
    # @return [Array<ListMappingConditionOperators200ResponseInner>]
    def list_mapping_condition_operators(authorization, condition_value, opts = {})
      data, _status_code, _headers = list_mapping_condition_operators_with_http_info(authorization, condition_value, opts)
      data
    end

    # @param authorization [String] 
    # @param condition_value [String] The value for the selected condition.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ListMappingConditionOperators200ResponseInner>, Integer, Hash)>] Array<ListMappingConditionOperators200ResponseInner> data, response status code and response headers
    def list_mapping_condition_operators_with_http_info(authorization, condition_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_mapping_condition_operators ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_mapping_condition_operators"
      end
      # verify the required parameter 'condition_value' is set
      if @api_client.config.client_side_validation && condition_value.nil?
        fail ArgumentError, "Missing the required parameter 'condition_value' when calling DefaultApi.list_mapping_condition_operators"
      end
      # resource path
      local_var_path = '/api/2/apps/mappings/conditions/{condition_value}/operators'.sub('{' + 'condition_value' + '}', CGI.escape(condition_value.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ListMappingConditionOperators200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_mapping_condition_operators",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_mapping_condition_operators\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param condition_value [String] The value for the selected condition.
    # @param [Hash] opts the optional parameters
    # @return [Array<ListConditionValues200ResponseInner>]
    def list_mapping_condition_values(authorization, condition_value, opts = {})
      data, _status_code, _headers = list_mapping_condition_values_with_http_info(authorization, condition_value, opts)
      data
    end

    # @param authorization [String] 
    # @param condition_value [String] The value for the selected condition.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ListConditionValues200ResponseInner>, Integer, Hash)>] Array<ListConditionValues200ResponseInner> data, response status code and response headers
    def list_mapping_condition_values_with_http_info(authorization, condition_value, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_mapping_condition_values ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_mapping_condition_values"
      end
      # verify the required parameter 'condition_value' is set
      if @api_client.config.client_side_validation && condition_value.nil?
        fail ArgumentError, "Missing the required parameter 'condition_value' when calling DefaultApi.list_mapping_condition_values"
      end
      # resource path
      local_var_path = '/api/2/apps/mappings/conditions/{condition_value}/values'.sub('{' + 'condition_value' + '}', CGI.escape(condition_value.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ListConditionValues200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_mapping_condition_values",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_mapping_condition_values\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<ListMappingConditions200ResponseInner>]
    def list_mapping_conditions(authorization, opts = {})
      data, _status_code, _headers = list_mapping_conditions_with_http_info(authorization, opts)
      data
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ListMappingConditions200ResponseInner>, Integer, Hash)>] Array<ListMappingConditions200ResponseInner> data, response status code and response headers
    def list_mapping_conditions_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_mapping_conditions ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_mapping_conditions"
      end
      # resource path
      local_var_path = '/api/2/apps/mappings/conditions'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ListMappingConditions200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_mapping_conditions",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_mapping_conditions\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :enabled Defaults to true. When set to &#x60;false&#x60; will return all disabled mappings. (default to true)
    # @option opts [String] :has_condition Filters Mappings based on their Conditions.
    # @option opts [String] :has_condition_type Filters Mappings based on their condition types.
    # @option opts [String] :has_action Filters Mappings based on their Actions.
    # @option opts [String] :has_action_type Filters Mappings based on their action types.
    # @return [Array<Mapping>]
    def list_mappings(authorization, opts = {})
      data, _status_code, _headers = list_mappings_with_http_info(authorization, opts)
      data
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :enabled Defaults to true. When set to &#x60;false&#x60; will return all disabled mappings. (default to true)
    # @option opts [String] :has_condition Filters Mappings based on their Conditions.
    # @option opts [String] :has_condition_type Filters Mappings based on their condition types.
    # @option opts [String] :has_action Filters Mappings based on their Actions.
    # @option opts [String] :has_action_type Filters Mappings based on their action types.
    # @return [Array<(Array<Mapping>, Integer, Hash)>] Array<Mapping> data, response status code and response headers
    def list_mappings_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_mappings ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_mappings"
      end
      allowable_values = ["builtin", "custom", "none"]
      if @api_client.config.client_side_validation && opts[:'has_condition_type'] && !allowable_values.include?(opts[:'has_condition_type'])
        fail ArgumentError, "invalid value for \"has_condition_type\", must be one of #{allowable_values}"
      end
      allowable_values = ["builtin", "custom", "none"]
      if @api_client.config.client_side_validation && opts[:'has_action_type'] && !allowable_values.include?(opts[:'has_action_type'])
        fail ArgumentError, "invalid value for \"has_action_type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/2/mappings'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'has_condition'] = opts[:'has_condition'] if !opts[:'has_condition'].nil?
      query_params[:'has_condition_type'] = opts[:'has_condition_type'] if !opts[:'has_condition_type'].nil?
      query_params[:'has_action'] = opts[:'has_action'] if !opts[:'has_action'].nil?
      query_params[:'has_action_type'] = opts[:'has_action_type'] if !opts[:'has_action_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Mapping>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_mappings",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_mappings\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def list_risk_rules(authorization, opts = {})
      list_risk_rules_with_http_info(authorization, opts)
      nil
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def list_risk_rules_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_risk_rules ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_risk_rules"
      end
      # resource path
      local_var_path = '/api/2/risk/rules'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_risk_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_risk_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
    # @option opts [Integer] :page The page number of results to return.
    # @option opts [String] :cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
    # @option opts [String] :name Optional. Filters by role name.
    # @option opts [String] :app_id Optional. Returns roles that contain this app name.
    # @option opts [String] :fields Optional. Comma delimited list of fields to return.
    # @return [Array<Role>]
    def list_roles(authorization, opts = {})
      data, _status_code, _headers = list_roles_with_http_info(authorization, opts)
      data
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
    # @option opts [Integer] :page The page number of results to return.
    # @option opts [String] :cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
    # @option opts [String] :name Optional. Filters by role name.
    # @option opts [String] :app_id Optional. Returns roles that contain this app name.
    # @option opts [String] :fields Optional. Comma delimited list of fields to return.
    # @return [Array<(Array<Role>, Integer, Hash)>] Array<Role> data, response status code and response headers
    def list_roles_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_roles ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_roles"
      end
      allowable_values = ["apps", "users", "admins"]
      if @api_client.config.client_side_validation && opts[:'fields'] && !allowable_values.include?(opts[:'fields'])
        fail ArgumentError, "invalid value for \"fields\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/2/roles'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'name'] = opts[:'name'] if !opts[:'name'].nil?
      query_params[:'app_id'] = opts[:'app_id'] if !opts[:'app_id'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Role>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_roles",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_roles\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :enabled Defaults to true. When set to &#x60;false&#x60; will return all disabled rules.
    # @option opts [String] :has_condition Filters Rules based on their Conditions.
    # @option opts [String] :has_condition_type Filters Rules based on their condition types.
    # @option opts [String] :has_action Filters Rules based on their Actions.
    # @option opts [String] :has_action_type Filters Rules based on their action types.
    # @return [Array<Rule>]
    def list_rules(authorization, app_id, opts = {})
      data, _status_code, _headers = list_rules_with_http_info(authorization, app_id, opts)
      data
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :enabled Defaults to true. When set to &#x60;false&#x60; will return all disabled rules.
    # @option opts [String] :has_condition Filters Rules based on their Conditions.
    # @option opts [String] :has_condition_type Filters Rules based on their condition types.
    # @option opts [String] :has_action Filters Rules based on their Actions.
    # @option opts [String] :has_action_type Filters Rules based on their action types.
    # @return [Array<(Array<Rule>, Integer, Hash)>] Array<Rule> data, response status code and response headers
    def list_rules_with_http_info(authorization, app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_rules ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_rules"
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling DefaultApi.list_rules"
      end
      # resource path
      local_var_path = '/api/2/apps/{app_id}/rules'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'enabled'] = opts[:'enabled'] if !opts[:'enabled'].nil?
      query_params[:'has_condition'] = opts[:'has_condition'] if !opts[:'has_condition'].nil?
      query_params[:'has_condition_type'] = opts[:'has_condition_type'] if !opts[:'has_condition_type'].nil?
      query_params[:'has_action'] = opts[:'has_action'] if !opts[:'has_action'].nil?
      query_params[:'has_action_type'] = opts[:'has_action_type'] if !opts[:'has_action_type'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Rule>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_rules",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_rules\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<ListScopes200ResponseInner>]
    def list_scopes(authorization, id, opts = {})
      data, _status_code, _headers = list_scopes_with_http_info(authorization, id, opts)
      data
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<ListScopes200ResponseInner>, Integer, Hash)>] Array<ListScopes200ResponseInner> data, response status code and response headers
    def list_scopes_with_http_info(authorization, id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_scopes ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_scopes"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.list_scopes"
      end
      # resource path
      local_var_path = '/api/2/api_authorizations/{id}/scopes'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<ListScopes200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_scopes",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_scopes\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
    # @option opts [Integer] :page The page number of results to return.
    # @option opts [String] :cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
    # @option opts [String] :created_since An ISO8601 timestamp value that returns all users created after a given date &amp; time.
    # @option opts [String] :created_until An ISO8601 timestamp value that returns all users created before a given date &amp; time.
    # @option opts [String] :updated_since An ISO8601 timestamp value that returns all users updated after a given date &amp; time.
    # @option opts [String] :updated_until An ISO8601 timestamp value that returns all users updated before a given date &amp; time.
    # @option opts [String] :last_login_since An ISO8601 timestamp value that returns all users that logged in after a given date &amp; time.
    # @option opts [String] :last_login_until 
    # @option opts [String] :firstname The first name of the user
    # @option opts [String] :lastname The last name of the user
    # @option opts [String] :email The email address of the user
    # @option opts [String] :username The username for the user
    # @option opts [String] :samaccountname The AD login name for the user
    # @option opts [String] :directory_id The ID in OneLogin of the Directory that the user belongs to
    # @option opts [String] :external_id An external identifier that has been set on the user
    # @option opts [String] :app_id The ID of a OneLogin Application
    # @option opts [String] :user_ids A comma separated list of OneLogin User IDs
    # @option opts [String] :custom_attributes_attribute_name The short name of a custom attribute. Note that the attribute name is prefixed with custom_attributes.
    # @option opts [String] :fields A comma separated list user attributes to return.
    # @return [Array<User>]
    def list_users(authorization, opts = {})
      data, _status_code, _headers = list_users_with_http_info(authorization, opts)
      data
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Integer] :limit The total number of items returned per page. The maximum limit varies between endpoints, see the relevant endpoint documentation for the specific limit.
    # @option opts [Integer] :page The page number of results to return.
    # @option opts [String] :cursor Set to the value extracted from Before-Cursor or After-Cursor headers to return the previous or next page.
    # @option opts [String] :created_since An ISO8601 timestamp value that returns all users created after a given date &amp; time.
    # @option opts [String] :created_until An ISO8601 timestamp value that returns all users created before a given date &amp; time.
    # @option opts [String] :updated_since An ISO8601 timestamp value that returns all users updated after a given date &amp; time.
    # @option opts [String] :updated_until An ISO8601 timestamp value that returns all users updated before a given date &amp; time.
    # @option opts [String] :last_login_since An ISO8601 timestamp value that returns all users that logged in after a given date &amp; time.
    # @option opts [String] :last_login_until 
    # @option opts [String] :firstname The first name of the user
    # @option opts [String] :lastname The last name of the user
    # @option opts [String] :email The email address of the user
    # @option opts [String] :username The username for the user
    # @option opts [String] :samaccountname The AD login name for the user
    # @option opts [String] :directory_id The ID in OneLogin of the Directory that the user belongs to
    # @option opts [String] :external_id An external identifier that has been set on the user
    # @option opts [String] :app_id The ID of a OneLogin Application
    # @option opts [String] :user_ids A comma separated list of OneLogin User IDs
    # @option opts [String] :custom_attributes_attribute_name The short name of a custom attribute. Note that the attribute name is prefixed with custom_attributes.
    # @option opts [String] :fields A comma separated list user attributes to return.
    # @return [Array<(Array<User>, Integer, Hash)>] Array<User> data, response status code and response headers
    def list_users_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.list_users ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.list_users"
      end
      # resource path
      local_var_path = '/api/2/users'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'limit'] = opts[:'limit'] if !opts[:'limit'].nil?
      query_params[:'page'] = opts[:'page'] if !opts[:'page'].nil?
      query_params[:'cursor'] = opts[:'cursor'] if !opts[:'cursor'].nil?
      query_params[:'created_since'] = opts[:'created_since'] if !opts[:'created_since'].nil?
      query_params[:'created_until'] = opts[:'created_until'] if !opts[:'created_until'].nil?
      query_params[:'updated_since'] = opts[:'updated_since'] if !opts[:'updated_since'].nil?
      query_params[:'updated_until'] = opts[:'updated_until'] if !opts[:'updated_until'].nil?
      query_params[:'last_login_since'] = opts[:'last_login_since'] if !opts[:'last_login_since'].nil?
      query_params[:'last_login_until'] = opts[:'last_login_until'] if !opts[:'last_login_until'].nil?
      query_params[:'firstname'] = opts[:'firstname'] if !opts[:'firstname'].nil?
      query_params[:'lastname'] = opts[:'lastname'] if !opts[:'lastname'].nil?
      query_params[:'email'] = opts[:'email'] if !opts[:'email'].nil?
      query_params[:'username'] = opts[:'username'] if !opts[:'username'].nil?
      query_params[:'samaccountname'] = opts[:'samaccountname'] if !opts[:'samaccountname'].nil?
      query_params[:'directory_id'] = opts[:'directory_id'] if !opts[:'directory_id'].nil?
      query_params[:'external_id'] = opts[:'external_id'] if !opts[:'external_id'].nil?
      query_params[:'app_id'] = opts[:'app_id'] if !opts[:'app_id'].nil?
      query_params[:'user_ids'] = opts[:'user_ids'] if !opts[:'user_ids'].nil?
      query_params[:'custom_attributes.{attribute_name}'] = opts[:'custom_attributes_attribute_name'] if !opts[:'custom_attributes_attribute_name'].nil?
      query_params[:'fields'] = opts[:'fields'] if !opts[:'fields'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<User>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.list_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#list_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param client_app_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_client_app(authorization, id, client_app_id, opts = {})
      remove_client_app_with_http_info(authorization, id, client_app_id, opts)
      nil
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param client_app_id [Integer] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_client_app_with_http_info(authorization, id, client_app_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.remove_client_app ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.remove_client_app"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.remove_client_app"
      end
      # verify the required parameter 'client_app_id' is set
      if @api_client.config.client_side_validation && client_app_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_app_id' when calling DefaultApi.remove_client_app"
      end
      # resource path
      local_var_path = '/api/2/api_authorizations/{id}/clients/{client_app_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'client_app_id' + '}', CGI.escape(client_app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.remove_client_app",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#remove_client_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param role_id [Integer] Set to the id of the role you want to return.
    # @param remove_role_users_request [RemoveRoleUsersRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_role_admins(authorization, role_id, remove_role_users_request, opts = {})
      remove_role_admins_with_http_info(authorization, role_id, remove_role_users_request, opts)
      nil
    end

    # @param authorization [String] 
    # @param role_id [Integer] Set to the id of the role you want to return.
    # @param remove_role_users_request [RemoveRoleUsersRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_role_admins_with_http_info(authorization, role_id, remove_role_users_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.remove_role_admins ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.remove_role_admins"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling DefaultApi.remove_role_admins"
      end
      # verify the required parameter 'remove_role_users_request' is set
      if @api_client.config.client_side_validation && remove_role_users_request.nil?
        fail ArgumentError, "Missing the required parameter 'remove_role_users_request' when calling DefaultApi.remove_role_admins"
      end
      # resource path
      local_var_path = '/api/2/roles/{role_id}/admins'.sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(remove_role_users_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.remove_role_admins",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#remove_role_admins\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param role_id [Integer] Set to the id of the role you want to return.
    # @param remove_role_users_request [RemoveRoleUsersRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def remove_role_users(authorization, role_id, remove_role_users_request, opts = {})
      remove_role_users_with_http_info(authorization, role_id, remove_role_users_request, opts)
      nil
    end

    # @param authorization [String] 
    # @param role_id [Integer] Set to the id of the role you want to return.
    # @param remove_role_users_request [RemoveRoleUsersRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def remove_role_users_with_http_info(authorization, role_id, remove_role_users_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.remove_role_users ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.remove_role_users"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling DefaultApi.remove_role_users"
      end
      # verify the required parameter 'remove_role_users_request' is set
      if @api_client.config.client_side_validation && remove_role_users_request.nil?
        fail ArgumentError, "Missing the required parameter 'remove_role_users_request' when calling DefaultApi.remove_role_users"
      end
      # resource path
      local_var_path = '/api/2/roles/{role_id}/users'.sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(remove_role_users_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.remove_role_users",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#remove_role_users\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [RevokeTokenRequest] :revoke_token_request 
    # @return [GenerateToken400Response]
    def revoke_token(authorization, opts = {})
      data, _status_code, _headers = revoke_token_with_http_info(authorization, opts)
      data
    end

    # @param authorization [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [RevokeTokenRequest] :revoke_token_request 
    # @return [Array<(GenerateToken400Response, Integer, Hash)>] GenerateToken400Response data, response status code and response headers
    def revoke_token_with_http_info(authorization, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.revoke_token ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.revoke_token"
      end
      # resource path
      local_var_path = '/auth/oauth2/revoke'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(opts[:'revoke_token_request'])

      # return_type
      return_type = opts[:debug_return_type] || 'GenerateToken400Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.revoke_token",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#revoke_token\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param role_id [Integer] Set to the id of the role you want to return.
    # @param request_body [Array<Integer>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<SetRoleApps200ResponseInner>]
    def set_role_apps(authorization, role_id, request_body, opts = {})
      data, _status_code, _headers = set_role_apps_with_http_info(authorization, role_id, request_body, opts)
      data
    end

    # @param authorization [String] 
    # @param role_id [Integer] Set to the id of the role you want to return.
    # @param request_body [Array<Integer>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<SetRoleApps200ResponseInner>, Integer, Hash)>] Array<SetRoleApps200ResponseInner> data, response status code and response headers
    def set_role_apps_with_http_info(authorization, role_id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.set_role_apps ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.set_role_apps"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling DefaultApi.set_role_apps"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling DefaultApi.set_role_apps"
      end
      # resource path
      local_var_path = '/api/2/roles/{role_id}/apps'.sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(request_body)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<SetRoleApps200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.set_role_apps",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#set_role_apps\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param track_event_request [TrackEventRequest] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def track_event(authorization, track_event_request, opts = {})
      track_event_with_http_info(authorization, track_event_request, opts)
      nil
    end

    # @param authorization [String] 
    # @param track_event_request [TrackEventRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def track_event_with_http_info(authorization, track_event_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.track_event ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.track_event"
      end
      # verify the required parameter 'track_event_request' is set
      if @api_client.config.client_side_validation && track_event_request.nil?
        fail ArgumentError, "Missing the required parameter 'track_event_request' when calling DefaultApi.track_event"
      end
      # resource path
      local_var_path = '/api/2/risk/events'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(track_event_request)

      # return_type
      return_type = opts[:debug_return_type]

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.track_event",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#track_event\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param claim_id [Integer] 
    # @param add_access_token_claim_request [AddAccessTokenClaimRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Id]
    def update_access_token_claim(authorization, id, claim_id, add_access_token_claim_request, opts = {})
      data, _status_code, _headers = update_access_token_claim_with_http_info(authorization, id, claim_id, add_access_token_claim_request, opts)
      data
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param claim_id [Integer] 
    # @param add_access_token_claim_request [AddAccessTokenClaimRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Id, Integer, Hash)>] Id data, response status code and response headers
    def update_access_token_claim_with_http_info(authorization, id, claim_id, add_access_token_claim_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_access_token_claim ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.update_access_token_claim"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.update_access_token_claim"
      end
      # verify the required parameter 'claim_id' is set
      if @api_client.config.client_side_validation && claim_id.nil?
        fail ArgumentError, "Missing the required parameter 'claim_id' when calling DefaultApi.update_access_token_claim"
      end
      # verify the required parameter 'add_access_token_claim_request' is set
      if @api_client.config.client_side_validation && add_access_token_claim_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_access_token_claim_request' when calling DefaultApi.update_access_token_claim"
      end
      # resource path
      local_var_path = '/api/2/api_authorizations/{id}/claims/{claim_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'claim_id' + '}', CGI.escape(claim_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_access_token_claim_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Id'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.update_access_token_claim",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_access_token_claim\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param schema [Schema] 
    # @param [Hash] opts the optional parameters
    # @return [Schema]
    def update_app(authorization, app_id, schema, opts = {})
      data, _status_code, _headers = update_app_with_http_info(authorization, app_id, schema, opts)
      data
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param schema [Schema] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Schema, Integer, Hash)>] Schema data, response status code and response headers
    def update_app_with_http_info(authorization, app_id, schema, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_app ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.update_app"
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling DefaultApi.update_app"
      end
      # verify the required parameter 'schema' is set
      if @api_client.config.client_side_validation && schema.nil?
        fail ArgumentError, "Missing the required parameter 'schema' when calling DefaultApi.update_app"
      end
      # resource path
      local_var_path = '/api/2/apps/{app_id}'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(schema)

      # return_type
      return_type = opts[:debug_return_type] || 'Schema'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.update_app",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param create_authorization_server_request [CreateAuthorizationServerRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Id]
    def update_authorization_server(authorization, id, create_authorization_server_request, opts = {})
      data, _status_code, _headers = update_authorization_server_with_http_info(authorization, id, create_authorization_server_request, opts)
      data
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param create_authorization_server_request [CreateAuthorizationServerRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Id, Integer, Hash)>] Id data, response status code and response headers
    def update_authorization_server_with_http_info(authorization, id, create_authorization_server_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_authorization_server ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.update_authorization_server"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.update_authorization_server"
      end
      # verify the required parameter 'create_authorization_server_request' is set
      if @api_client.config.client_side_validation && create_authorization_server_request.nil?
        fail ArgumentError, "Missing the required parameter 'create_authorization_server_request' when calling DefaultApi.update_authorization_server"
      end
      # resource path
      local_var_path = '/api/2/api_authorizations/{id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(create_authorization_server_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Id'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.update_authorization_server",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_authorization_server\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param client_app_id [Integer] 
    # @param update_client_app_request [UpdateClientAppRequest] 
    # @param [Hash] opts the optional parameters
    # @return [ClientApp]
    def update_client_app(authorization, id, client_app_id, update_client_app_request, opts = {})
      data, _status_code, _headers = update_client_app_with_http_info(authorization, id, client_app_id, update_client_app_request, opts)
      data
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param client_app_id [Integer] 
    # @param update_client_app_request [UpdateClientAppRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(ClientApp, Integer, Hash)>] ClientApp data, response status code and response headers
    def update_client_app_with_http_info(authorization, id, client_app_id, update_client_app_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_client_app ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.update_client_app"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.update_client_app"
      end
      # verify the required parameter 'client_app_id' is set
      if @api_client.config.client_side_validation && client_app_id.nil?
        fail ArgumentError, "Missing the required parameter 'client_app_id' when calling DefaultApi.update_client_app"
      end
      # verify the required parameter 'update_client_app_request' is set
      if @api_client.config.client_side_validation && update_client_app_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_client_app_request' when calling DefaultApi.update_client_app"
      end
      # resource path
      local_var_path = '/api/2/api_authorizations/{id}/clients/{client_app_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'client_app_id' + '}', CGI.escape(client_app_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_client_app_request)

      # return_type
      return_type = opts[:debug_return_type] || 'ClientApp'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.update_client_app",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_client_app\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param envvar_id [String] Set to the id of the Hook Environment Variable that you want to fetch.
    # @param update_environment_variable_request [UpdateEnvironmentVariableRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Envvar]
    def update_environment_variable(authorization, envvar_id, update_environment_variable_request, opts = {})
      data, _status_code, _headers = update_environment_variable_with_http_info(authorization, envvar_id, update_environment_variable_request, opts)
      data
    end

    # @param authorization [String] 
    # @param envvar_id [String] Set to the id of the Hook Environment Variable that you want to fetch.
    # @param update_environment_variable_request [UpdateEnvironmentVariableRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Envvar, Integer, Hash)>] Envvar data, response status code and response headers
    def update_environment_variable_with_http_info(authorization, envvar_id, update_environment_variable_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_environment_variable ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.update_environment_variable"
      end
      # verify the required parameter 'envvar_id' is set
      if @api_client.config.client_side_validation && envvar_id.nil?
        fail ArgumentError, "Missing the required parameter 'envvar_id' when calling DefaultApi.update_environment_variable"
      end
      # verify the required parameter 'update_environment_variable_request' is set
      if @api_client.config.client_side_validation && update_environment_variable_request.nil?
        fail ArgumentError, "Missing the required parameter 'update_environment_variable_request' when calling DefaultApi.update_environment_variable"
      end
      # resource path
      local_var_path = '/api/2/hooks/envs/{envvar_id}'.sub('{' + 'envvar_id' + '}', CGI.escape(envvar_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(update_environment_variable_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Envvar'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.update_environment_variable",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_environment_variable\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param hook_id [String] Set to the id of the Hook that you want to return.
    # @param hook [Hook] 
    # @param [Hash] opts the optional parameters
    # @return [Hook]
    def update_hook(authorization, hook_id, hook, opts = {})
      data, _status_code, _headers = update_hook_with_http_info(authorization, hook_id, hook, opts)
      data
    end

    # @param authorization [String] 
    # @param hook_id [String] Set to the id of the Hook that you want to return.
    # @param hook [Hook] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hook, Integer, Hash)>] Hook data, response status code and response headers
    def update_hook_with_http_info(authorization, hook_id, hook, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_hook ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.update_hook"
      end
      # verify the required parameter 'hook_id' is set
      if @api_client.config.client_side_validation && hook_id.nil?
        fail ArgumentError, "Missing the required parameter 'hook_id' when calling DefaultApi.update_hook"
      end
      # verify the required parameter 'hook' is set
      if @api_client.config.client_side_validation && hook.nil?
        fail ArgumentError, "Missing the required parameter 'hook' when calling DefaultApi.update_hook"
      end
      # resource path
      local_var_path = '/api/2/hooks/{hook_id}'.sub('{' + 'hook_id' + '}', CGI.escape(hook_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(hook)

      # return_type
      return_type = opts[:debug_return_type] || 'Hook'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.update_hook",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_hook\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param mapping_id [Integer] The id of the user mapping to locate.
    # @param mapping [Mapping] 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def update_mapping(authorization, mapping_id, mapping, opts = {})
      data, _status_code, _headers = update_mapping_with_http_info(authorization, mapping_id, mapping, opts)
      data
    end

    # @param authorization [String] 
    # @param mapping_id [Integer] The id of the user mapping to locate.
    # @param mapping [Mapping] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def update_mapping_with_http_info(authorization, mapping_id, mapping, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_mapping ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.update_mapping"
      end
      # verify the required parameter 'mapping_id' is set
      if @api_client.config.client_side_validation && mapping_id.nil?
        fail ArgumentError, "Missing the required parameter 'mapping_id' when calling DefaultApi.update_mapping"
      end
      # verify the required parameter 'mapping' is set
      if @api_client.config.client_side_validation && mapping.nil?
        fail ArgumentError, "Missing the required parameter 'mapping' when calling DefaultApi.update_mapping"
      end
      # resource path
      local_var_path = '/api/2/mappings/{mapping_id}'.sub('{' + 'mapping_id' + '}', CGI.escape(mapping_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(mapping)

      # return_type
      return_type = opts[:debug_return_type] || 'Integer'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.update_mapping",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_mapping\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param risk_rule_id [String] 
    # @param risk_rule [RiskRule] 
    # @param [Hash] opts the optional parameters
    # @return [RiskRule]
    def update_risk_rule(authorization, risk_rule_id, risk_rule, opts = {})
      data, _status_code, _headers = update_risk_rule_with_http_info(authorization, risk_rule_id, risk_rule, opts)
      data
    end

    # @param authorization [String] 
    # @param risk_rule_id [String] 
    # @param risk_rule [RiskRule] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RiskRule, Integer, Hash)>] RiskRule data, response status code and response headers
    def update_risk_rule_with_http_info(authorization, risk_rule_id, risk_rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_risk_rule ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.update_risk_rule"
      end
      # verify the required parameter 'risk_rule_id' is set
      if @api_client.config.client_side_validation && risk_rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'risk_rule_id' when calling DefaultApi.update_risk_rule"
      end
      # verify the required parameter 'risk_rule' is set
      if @api_client.config.client_side_validation && risk_rule.nil?
        fail ArgumentError, "Missing the required parameter 'risk_rule' when calling DefaultApi.update_risk_rule"
      end
      # resource path
      local_var_path = '/api/2/risk/rules/{risk_rule_id}'.sub('{' + 'risk_rule_id' + '}', CGI.escape(risk_rule_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(risk_rule)

      # return_type
      return_type = opts[:debug_return_type] || 'RiskRule'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.update_risk_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_risk_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param role_id [Integer] Set to the id of the role you want to return.
    # @param role [Role] 
    # @param [Hash] opts the optional parameters
    # @return [UpdateRole200Response]
    def update_role(authorization, role_id, role, opts = {})
      data, _status_code, _headers = update_role_with_http_info(authorization, role_id, role, opts)
      data
    end

    # @param authorization [String] 
    # @param role_id [Integer] Set to the id of the role you want to return.
    # @param role [Role] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(UpdateRole200Response, Integer, Hash)>] UpdateRole200Response data, response status code and response headers
    def update_role_with_http_info(authorization, role_id, role, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_role ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.update_role"
      end
      # verify the required parameter 'role_id' is set
      if @api_client.config.client_side_validation && role_id.nil?
        fail ArgumentError, "Missing the required parameter 'role_id' when calling DefaultApi.update_role"
      end
      # verify the required parameter 'role' is set
      if @api_client.config.client_side_validation && role.nil?
        fail ArgumentError, "Missing the required parameter 'role' when calling DefaultApi.update_role"
      end
      # resource path
      local_var_path = '/api/2/roles/{role_id}'.sub('{' + 'role_id' + '}', CGI.escape(role_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(role)

      # return_type
      return_type = opts[:debug_return_type] || 'UpdateRole200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.update_role",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_role\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param rule_id [Integer] The id of the app rule to locate.
    # @param rule [Rule] 
    # @param [Hash] opts the optional parameters
    # @return [RuleId]
    def update_rule(authorization, app_id, rule_id, rule, opts = {})
      data, _status_code, _headers = update_rule_with_http_info(authorization, app_id, rule_id, rule, opts)
      data
    end

    # @param authorization [String] 
    # @param app_id [Integer] 
    # @param rule_id [Integer] The id of the app rule to locate.
    # @param rule [Rule] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(RuleId, Integer, Hash)>] RuleId data, response status code and response headers
    def update_rule_with_http_info(authorization, app_id, rule_id, rule, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_rule ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.update_rule"
      end
      # verify the required parameter 'app_id' is set
      if @api_client.config.client_side_validation && app_id.nil?
        fail ArgumentError, "Missing the required parameter 'app_id' when calling DefaultApi.update_rule"
      end
      # verify the required parameter 'rule_id' is set
      if @api_client.config.client_side_validation && rule_id.nil?
        fail ArgumentError, "Missing the required parameter 'rule_id' when calling DefaultApi.update_rule"
      end
      # verify the required parameter 'rule' is set
      if @api_client.config.client_side_validation && rule.nil?
        fail ArgumentError, "Missing the required parameter 'rule' when calling DefaultApi.update_rule"
      end
      # resource path
      local_var_path = '/api/2/apps/{app_id}/rules/{rule_id}'.sub('{' + 'app_id' + '}', CGI.escape(app_id.to_s)).sub('{' + 'rule_id' + '}', CGI.escape(rule_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(rule)

      # return_type
      return_type = opts[:debug_return_type] || 'RuleId'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.update_rule",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_rule\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param scope_id [Integer] 
    # @param add_scope_request [AddScopeRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Id]
    def update_scope(authorization, id, scope_id, add_scope_request, opts = {})
      data, _status_code, _headers = update_scope_with_http_info(authorization, id, scope_id, add_scope_request, opts)
      data
    end

    # @param authorization [String] 
    # @param id [Integer] 
    # @param scope_id [Integer] 
    # @param add_scope_request [AddScopeRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Id, Integer, Hash)>] Id data, response status code and response headers
    def update_scope_with_http_info(authorization, id, scope_id, add_scope_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_scope ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.update_scope"
      end
      # verify the required parameter 'id' is set
      if @api_client.config.client_side_validation && id.nil?
        fail ArgumentError, "Missing the required parameter 'id' when calling DefaultApi.update_scope"
      end
      # verify the required parameter 'scope_id' is set
      if @api_client.config.client_side_validation && scope_id.nil?
        fail ArgumentError, "Missing the required parameter 'scope_id' when calling DefaultApi.update_scope"
      end
      # verify the required parameter 'add_scope_request' is set
      if @api_client.config.client_side_validation && add_scope_request.nil?
        fail ArgumentError, "Missing the required parameter 'add_scope_request' when calling DefaultApi.update_scope"
      end
      # resource path
      local_var_path = '/api/2/api_authorizations/{id}/scopes/{scope_id}'.sub('{' + 'id' + '}', CGI.escape(id.to_s)).sub('{' + 'scope_id' + '}', CGI.escape(scope_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(add_scope_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Id'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.update_scope",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_scope\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user that you want to return.
    # @param user [User] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mappings Controls how mappings will be applied to the user on creation. Defaults to async.
    # @option opts [Boolean] :validate_policy Will passwords validate against the User Policy? Defaults to true.
    # @return [User]
    def update_user(authorization, user_id, user, opts = {})
      data, _status_code, _headers = update_user_with_http_info(authorization, user_id, user, opts)
      data
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user that you want to return.
    # @param user [User] 
    # @param [Hash] opts the optional parameters
    # @option opts [String] :mappings Controls how mappings will be applied to the user on creation. Defaults to async.
    # @option opts [Boolean] :validate_policy Will passwords validate against the User Policy? Defaults to true.
    # @return [Array<(User, Integer, Hash)>] User data, response status code and response headers
    def update_user_with_http_info(authorization, user_id, user, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.update_user ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.update_user"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.update_user"
      end
      # verify the required parameter 'user' is set
      if @api_client.config.client_side_validation && user.nil?
        fail ArgumentError, "Missing the required parameter 'user' when calling DefaultApi.update_user"
      end
      allowable_values = ["async", "sync", "disabled"]
      if @api_client.config.client_side_validation && opts[:'mappings'] && !allowable_values.include?(opts[:'mappings'])
        fail ArgumentError, "invalid value for \"mappings\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/api/2/users/{user_id}'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'mappings'] = opts[:'mappings'] if !opts[:'mappings'].nil?
      query_params[:'validate_policy'] = opts[:'validate_policy'] if !opts[:'validate_policy'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(user)

      # return_type
      return_type = opts[:debug_return_type] || 'User'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.update_user",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#update_user\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user.
    # @param registration_id [Integer] Set to the uuid of the registration. This was included in the response as part of the initial request in Enroll Factor.
    # @param verify_enrollment_request [VerifyEnrollmentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Registration>]
    def verify_enrollment(authorization, user_id, registration_id, verify_enrollment_request, opts = {})
      data, _status_code, _headers = verify_enrollment_with_http_info(authorization, user_id, registration_id, verify_enrollment_request, opts)
      data
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user.
    # @param registration_id [Integer] Set to the uuid of the registration. This was included in the response as part of the initial request in Enroll Factor.
    # @param verify_enrollment_request [VerifyEnrollmentRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Registration>, Integer, Hash)>] Array<Registration> data, response status code and response headers
    def verify_enrollment_with_http_info(authorization, user_id, registration_id, verify_enrollment_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.verify_enrollment ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.verify_enrollment"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.verify_enrollment"
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling DefaultApi.verify_enrollment"
      end
      # verify the required parameter 'verify_enrollment_request' is set
      if @api_client.config.client_side_validation && verify_enrollment_request.nil?
        fail ArgumentError, "Missing the required parameter 'verify_enrollment_request' when calling DefaultApi.verify_enrollment"
      end
      # resource path
      local_var_path = '/api/2/mfa/users/{user_id}/registrations/{registration_id}'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s)).sub('{' + 'registration_id' + '}', CGI.escape(registration_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(verify_enrollment_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Registration>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.verify_enrollment",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#verify_enrollment\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user.
    # @param registration_id [Integer] Set to the uuid of the registration. This was included in the response as part of the initial request in Enroll Factor.
    # @param [Hash] opts the optional parameters
    # @return [Array<Registration>]
    def verify_enrollment_voice_protect(authorization, user_id, registration_id, opts = {})
      data, _status_code, _headers = verify_enrollment_voice_protect_with_http_info(authorization, user_id, registration_id, opts)
      data
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user.
    # @param registration_id [Integer] Set to the uuid of the registration. This was included in the response as part of the initial request in Enroll Factor.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Registration>, Integer, Hash)>] Array<Registration> data, response status code and response headers
    def verify_enrollment_voice_protect_with_http_info(authorization, user_id, registration_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.verify_enrollment_voice_protect ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.verify_enrollment_voice_protect"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.verify_enrollment_voice_protect"
      end
      # verify the required parameter 'registration_id' is set
      if @api_client.config.client_side_validation && registration_id.nil?
        fail ArgumentError, "Missing the required parameter 'registration_id' when calling DefaultApi.verify_enrollment_voice_protect"
      end
      # resource path
      local_var_path = '/api/2/mfa/users/{user_id}/registrations/{registration_id}'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s)).sub('{' + 'registration_id' + '}', CGI.escape(registration_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<Registration>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.verify_enrollment_voice_protect",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#verify_enrollment_voice_protect\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user.
    # @param verification_id [Integer] The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call.
    # @param verify_factor_request [VerifyFactorRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Status2]
    def verify_factor(authorization, user_id, verification_id, verify_factor_request, opts = {})
      data, _status_code, _headers = verify_factor_with_http_info(authorization, user_id, verification_id, verify_factor_request, opts)
      data
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user.
    # @param verification_id [Integer] The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call.
    # @param verify_factor_request [VerifyFactorRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Status2, Integer, Hash)>] Status2 data, response status code and response headers
    def verify_factor_with_http_info(authorization, user_id, verification_id, verify_factor_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.verify_factor ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.verify_factor"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.verify_factor"
      end
      # verify the required parameter 'verification_id' is set
      if @api_client.config.client_side_validation && verification_id.nil?
        fail ArgumentError, "Missing the required parameter 'verification_id' when calling DefaultApi.verify_factor"
      end
      # verify the required parameter 'verify_factor_request' is set
      if @api_client.config.client_side_validation && verify_factor_request.nil?
        fail ArgumentError, "Missing the required parameter 'verify_factor_request' when calling DefaultApi.verify_factor"
      end
      # resource path
      local_var_path = '/api/2/mfa/users/{user_id}/verifications/{verification_id}'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s)).sub('{' + 'verification_id' + '}', CGI.escape(verification_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(verify_factor_request)

      # return_type
      return_type = opts[:debug_return_type] || 'Status2'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.verify_factor",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#verify_factor\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param verify_factor_saml_request [VerifyFactorSamlRequest] 
    # @param [Hash] opts the optional parameters
    # @return [VerifyFactorSaml200Response]
    def verify_factor_saml(authorization, verify_factor_saml_request, opts = {})
      data, _status_code, _headers = verify_factor_saml_with_http_info(authorization, verify_factor_saml_request, opts)
      data
    end

    # @param authorization [String] 
    # @param verify_factor_saml_request [VerifyFactorSamlRequest] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(VerifyFactorSaml200Response, Integer, Hash)>] VerifyFactorSaml200Response data, response status code and response headers
    def verify_factor_saml_with_http_info(authorization, verify_factor_saml_request, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.verify_factor_saml ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.verify_factor_saml"
      end
      # verify the required parameter 'verify_factor_saml_request' is set
      if @api_client.config.client_side_validation && verify_factor_saml_request.nil?
        fail ArgumentError, "Missing the required parameter 'verify_factor_saml_request' when calling DefaultApi.verify_factor_saml"
      end
      # resource path
      local_var_path = '/api/2/saml_assertion/verify_factor'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      content_type = @api_client.select_header_content_type(['application/json'])
      if !content_type.nil?
          header_params['Content-Type'] = content_type
      end
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body] || @api_client.object_to_http_body(verify_factor_saml_request)

      # return_type
      return_type = opts[:debug_return_type] || 'VerifyFactorSaml200Response'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.verify_factor_saml",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#verify_factor_saml\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user.
    # @param verification_id [Integer] The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call.
    # @param [Hash] opts the optional parameters
    # @return [Array<VerifyFactorVoice200ResponseInner>]
    def verify_factor_voice(authorization, user_id, verification_id, opts = {})
      data, _status_code, _headers = verify_factor_voice_with_http_info(authorization, user_id, verification_id, opts)
      data
    end

    # @param authorization [String] 
    # @param user_id [Integer] Set to the id of the user.
    # @param verification_id [Integer] The verification_id is returned on activation of the factor or you can get the device_id using the Activate Factor API call.
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<VerifyFactorVoice200ResponseInner>, Integer, Hash)>] Array<VerifyFactorVoice200ResponseInner> data, response status code and response headers
    def verify_factor_voice_with_http_info(authorization, user_id, verification_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DefaultApi.verify_factor_voice ...'
      end
      # verify the required parameter 'authorization' is set
      if @api_client.config.client_side_validation && authorization.nil?
        fail ArgumentError, "Missing the required parameter 'authorization' when calling DefaultApi.verify_factor_voice"
      end
      # verify the required parameter 'user_id' is set
      if @api_client.config.client_side_validation && user_id.nil?
        fail ArgumentError, "Missing the required parameter 'user_id' when calling DefaultApi.verify_factor_voice"
      end
      # verify the required parameter 'verification_id' is set
      if @api_client.config.client_side_validation && verification_id.nil?
        fail ArgumentError, "Missing the required parameter 'verification_id' when calling DefaultApi.verify_factor_voice"
      end
      # resource path
      local_var_path = '/api/2/mfa/users/{user_id}/verifications/{verification_id}'.sub('{' + 'user_id' + '}', CGI.escape(user_id.to_s)).sub('{' + 'verification_id' + '}', CGI.escape(verification_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      header_params[:'Authorization'] = authorization

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:debug_body]

      # return_type
      return_type = opts[:debug_return_type] || 'Array<VerifyFactorVoice200ResponseInner>'

      # auth_names
      auth_names = opts[:debug_auth_names] || []

      new_options = opts.merge(
        :operation => :"DefaultApi.verify_factor_voice",
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DefaultApi#verify_factor_voice\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
