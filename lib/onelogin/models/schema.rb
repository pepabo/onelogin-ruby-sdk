=begin
#OneLogin API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.0.0-alpha.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

module OneLogin
  class Schema
    # Apps unique ID in OneLogin.
    attr_accessor :id

    # ID of the apps underlying connector.
    attr_accessor :connector_id

    # App name.
    attr_accessor :name

    # Freeform description of the app.
    attr_accessor :description

    # Freeform notes about the app.
    attr_accessor :notes

    # The security policy assigned to the app.
    attr_accessor :policy_id

    # The custom login page branding to use for this app. Applies to app initiated logins via OIDC or SAML.
    attr_accessor :brand_id

    # A link to the apps icon url.
    attr_accessor :icon_url

    # Indicates if the app is visible in the OneLogin portal.
    attr_accessor :visible

    # An ID indicating the type of app.
    attr_accessor :auth_method

    # ID of the OneLogin portal tab that the app is assigned to.
    attr_accessor :tab_id

    # The date the app was created.
    attr_accessor :created_at

    # The date the app was last updated.
    attr_accessor :updated_at

    # List of Role IDs that are assigned to the app. On App Create or Update the entire array is replaced with the values provided.
    attr_accessor :role_ids

    # Indicates whether or not administrators can access the app as a user that they have assumed control over.
    attr_accessor :allow_assumed_signin

    attr_accessor :provisioning

    attr_accessor :sso

    attr_accessor :configuration

    attr_accessor :parameters

    attr_accessor :enforcement_point

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'connector_id' => :'connector_id',
        :'name' => :'name',
        :'description' => :'description',
        :'notes' => :'notes',
        :'policy_id' => :'policy_id',
        :'brand_id' => :'brand_id',
        :'icon_url' => :'icon_url',
        :'visible' => :'visible',
        :'auth_method' => :'auth_method',
        :'tab_id' => :'tab_id',
        :'created_at' => :'created_at',
        :'updated_at' => :'updated_at',
        :'role_ids' => :'role_ids',
        :'allow_assumed_signin' => :'allow_assumed_signin',
        :'provisioning' => :'provisioning',
        :'sso' => :'sso',
        :'configuration' => :'configuration',
        :'parameters' => :'parameters',
        :'enforcement_point' => :'enforcement_point'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'connector_id' => :'Integer',
        :'name' => :'String',
        :'description' => :'String',
        :'notes' => :'String',
        :'policy_id' => :'Integer',
        :'brand_id' => :'Integer',
        :'icon_url' => :'String',
        :'visible' => :'Boolean',
        :'auth_method' => :'Integer',
        :'tab_id' => :'Integer',
        :'created_at' => :'String',
        :'updated_at' => :'String',
        :'role_ids' => :'Array<Integer>',
        :'allow_assumed_signin' => :'Boolean',
        :'provisioning' => :'SchemaProvisioning',
        :'sso' => :'Object',
        :'configuration' => :'Object',
        :'parameters' => :'Object',
        :'enforcement_point' => :'Object'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OneLogin::Schema` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OneLogin::Schema`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'connector_id')
        self.connector_id = attributes[:'connector_id']
      end

      if attributes.key?(:'name')
        self.name = attributes[:'name']
      end

      if attributes.key?(:'description')
        self.description = attributes[:'description']
      end

      if attributes.key?(:'notes')
        self.notes = attributes[:'notes']
      end

      if attributes.key?(:'policy_id')
        self.policy_id = attributes[:'policy_id']
      end

      if attributes.key?(:'brand_id')
        self.brand_id = attributes[:'brand_id']
      end

      if attributes.key?(:'icon_url')
        self.icon_url = attributes[:'icon_url']
      end

      if attributes.key?(:'visible')
        self.visible = attributes[:'visible']
      end

      if attributes.key?(:'auth_method')
        self.auth_method = attributes[:'auth_method']
      end

      if attributes.key?(:'tab_id')
        self.tab_id = attributes[:'tab_id']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'role_ids')
        if (value = attributes[:'role_ids']).is_a?(Array)
          self.role_ids = value
        end
      end

      if attributes.key?(:'allow_assumed_signin')
        self.allow_assumed_signin = attributes[:'allow_assumed_signin']
      end

      if attributes.key?(:'provisioning')
        self.provisioning = attributes[:'provisioning']
      end

      if attributes.key?(:'sso')
        self.sso = attributes[:'sso']
      end

      if attributes.key?(:'configuration')
        self.configuration = attributes[:'configuration']
      end

      if attributes.key?(:'parameters')
        self.parameters = attributes[:'parameters']
      end

      if attributes.key?(:'enforcement_point')
        self.enforcement_point = attributes[:'enforcement_point']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      auth_method_validator = EnumAttributeValidator.new('Integer', [0, 1, 2, 3, 4, 6, 7, 8])
      return false unless auth_method_validator.valid?(@auth_method)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] auth_method Object to be assigned
    def auth_method=(auth_method)
      validator = EnumAttributeValidator.new('Integer', [0, 1, 2, 3, 4, 6, 7, 8])
      unless validator.valid?(auth_method)
        fail ArgumentError, "invalid value for \"auth_method\", must be one of #{validator.allowable_values}."
      end
      @auth_method = auth_method
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          connector_id == o.connector_id &&
          name == o.name &&
          description == o.description &&
          notes == o.notes &&
          policy_id == o.policy_id &&
          brand_id == o.brand_id &&
          icon_url == o.icon_url &&
          visible == o.visible &&
          auth_method == o.auth_method &&
          tab_id == o.tab_id &&
          created_at == o.created_at &&
          updated_at == o.updated_at &&
          role_ids == o.role_ids &&
          allow_assumed_signin == o.allow_assumed_signin &&
          provisioning == o.provisioning &&
          sso == o.sso &&
          configuration == o.configuration &&
          parameters == o.parameters &&
          enforcement_point == o.enforcement_point
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, connector_id, name, description, notes, policy_id, brand_id, icon_url, visible, auth_method, tab_id, created_at, updated_at, role_ids, allow_assumed_signin, provisioning, sso, configuration, parameters, enforcement_point].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OneLogin.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
