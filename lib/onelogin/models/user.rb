=begin
#OneLogin API

#No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: 3.0.0-alpha.1

Generated by: https://openapi-generator.tech
OpenAPI Generator version: 6.0.1

=end

require 'date'
require 'time'

module OneLogin
  class User
    attr_accessor :id

    # A username for the user.
    attr_accessor :username

    # A valid email for the user.
    attr_accessor :email

    # The user's first name.
    attr_accessor :firstname

    # The user's last name.
    attr_accessor :lastname

    # The user's job title.
    attr_accessor :title

    # The user's department.
    attr_accessor :department

    # The user's company.
    attr_accessor :company

    # Free text related to the user.
    attr_accessor :comment

    # The ID of the Group in OneLogin that the user is assigned to.
    attr_accessor :group_id

    # A list of OneLogin Role IDs of the user
    attr_accessor :role_ids

    # The E.164 format phone number for a user.
    attr_accessor :phone

    attr_accessor :state

    attr_accessor :status

    # The ID of the OneLogin Directory of the user.
    attr_accessor :directory_id

    # The ID of the OneLogin Trusted IDP of the user.
    attr_accessor :trusted_idp_id

    # The ID of the user's manager in Active Directory.
    attr_accessor :manager_ad_id

    # The OneLogin User ID for the user's manager.
    attr_accessor :manager_user_id

    # The user's Active Directory username.
    attr_accessor :samaccount_name

    # The user's directory membership.
    attr_accessor :member_of

    # The principle name of the user.
    attr_accessor :userprincipalname

    # The distinguished name of the user.
    attr_accessor :distinguished_name

    # The ID of the user in an external directory.
    attr_accessor :external_id

    attr_accessor :activated_at

    attr_accessor :last_login

    attr_accessor :invitation_sent_at

    attr_accessor :updated_at

    attr_accessor :preferred_locale_code

    attr_accessor :created_at

    attr_accessor :custom_attributes

    attr_accessor :invalid_login_attempts

    attr_accessor :locked_until

    attr_accessor :password_changed_at

    # The password to set for a user.
    attr_accessor :password

    # Required if the password is being set.
    attr_accessor :password_confirmation

    # Use this when importing a password that's already hashed. Prepend the salt value to the cleartext password value before SHA-256-encoding it
    attr_accessor :password_algorithm

    # The salt value used with the password_algorithm.
    attr_accessor :salt

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'id' => :'id',
        :'username' => :'username',
        :'email' => :'email',
        :'firstname' => :'firstname',
        :'lastname' => :'lastname',
        :'title' => :'title',
        :'department' => :'department',
        :'company' => :'company',
        :'comment' => :'comment',
        :'group_id' => :'group_id',
        :'role_ids' => :'role_ids',
        :'phone' => :'phone',
        :'state' => :'state',
        :'status' => :'status',
        :'directory_id' => :'directory_id',
        :'trusted_idp_id' => :'trusted_idp_id',
        :'manager_ad_id' => :'manager_ad_id',
        :'manager_user_id' => :'manager_user_id',
        :'samaccount_name' => :'samaccount_name',
        :'member_of' => :'member_of',
        :'userprincipalname' => :'userprincipalname',
        :'distinguished_name' => :'distinguished_name',
        :'external_id' => :'external_id',
        :'activated_at' => :'activated_at',
        :'last_login' => :'last_login',
        :'invitation_sent_at' => :'invitation_sent_at',
        :'updated_at' => :'updated_at',
        :'preferred_locale_code' => :'preferred_locale_code',
        :'created_at' => :'created_at',
        :'custom_attributes' => :'custom_attributes',
        :'invalid_login_attempts' => :'invalid_login_attempts',
        :'locked_until' => :'locked_until',
        :'password_changed_at' => :'password_changed_at',
        :'password' => :'password',
        :'password_confirmation' => :'password_confirmation',
        :'password_algorithm' => :'password_algorithm',
        :'salt' => :'salt'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'id' => :'Integer',
        :'username' => :'String',
        :'email' => :'String',
        :'firstname' => :'String',
        :'lastname' => :'String',
        :'title' => :'String',
        :'department' => :'String',
        :'company' => :'String',
        :'comment' => :'String',
        :'group_id' => :'Integer',
        :'role_ids' => :'Array<Integer>',
        :'phone' => :'String',
        :'state' => :'Integer',
        :'status' => :'Integer',
        :'directory_id' => :'Integer',
        :'trusted_idp_id' => :'Integer',
        :'manager_ad_id' => :'String',
        :'manager_user_id' => :'String',
        :'samaccount_name' => :'String',
        :'member_of' => :'String',
        :'userprincipalname' => :'String',
        :'distinguished_name' => :'String',
        :'external_id' => :'String',
        :'activated_at' => :'String',
        :'last_login' => :'String',
        :'invitation_sent_at' => :'String',
        :'updated_at' => :'String',
        :'preferred_locale_code' => :'String',
        :'created_at' => :'String',
        :'custom_attributes' => :'Object',
        :'invalid_login_attempts' => :'Integer',
        :'locked_until' => :'String',
        :'password_changed_at' => :'String',
        :'password' => :'String',
        :'password_confirmation' => :'String',
        :'password_algorithm' => :'String',
        :'salt' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `OneLogin::User` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `OneLogin::User`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'id')
        self.id = attributes[:'id']
      end

      if attributes.key?(:'username')
        self.username = attributes[:'username']
      end

      if attributes.key?(:'email')
        self.email = attributes[:'email']
      end

      if attributes.key?(:'firstname')
        self.firstname = attributes[:'firstname']
      end

      if attributes.key?(:'lastname')
        self.lastname = attributes[:'lastname']
      end

      if attributes.key?(:'title')
        self.title = attributes[:'title']
      end

      if attributes.key?(:'department')
        self.department = attributes[:'department']
      end

      if attributes.key?(:'company')
        self.company = attributes[:'company']
      end

      if attributes.key?(:'comment')
        self.comment = attributes[:'comment']
      end

      if attributes.key?(:'group_id')
        self.group_id = attributes[:'group_id']
      end

      if attributes.key?(:'role_ids')
        if (value = attributes[:'role_ids']).is_a?(Array)
          self.role_ids = value
        end
      end

      if attributes.key?(:'phone')
        self.phone = attributes[:'phone']
      end

      if attributes.key?(:'state')
        self.state = attributes[:'state']
      end

      if attributes.key?(:'status')
        self.status = attributes[:'status']
      end

      if attributes.key?(:'directory_id')
        self.directory_id = attributes[:'directory_id']
      end

      if attributes.key?(:'trusted_idp_id')
        self.trusted_idp_id = attributes[:'trusted_idp_id']
      end

      if attributes.key?(:'manager_ad_id')
        self.manager_ad_id = attributes[:'manager_ad_id']
      end

      if attributes.key?(:'manager_user_id')
        self.manager_user_id = attributes[:'manager_user_id']
      end

      if attributes.key?(:'samaccount_name')
        self.samaccount_name = attributes[:'samaccount_name']
      end

      if attributes.key?(:'member_of')
        self.member_of = attributes[:'member_of']
      end

      if attributes.key?(:'userprincipalname')
        self.userprincipalname = attributes[:'userprincipalname']
      end

      if attributes.key?(:'distinguished_name')
        self.distinguished_name = attributes[:'distinguished_name']
      end

      if attributes.key?(:'external_id')
        self.external_id = attributes[:'external_id']
      end

      if attributes.key?(:'activated_at')
        self.activated_at = attributes[:'activated_at']
      end

      if attributes.key?(:'last_login')
        self.last_login = attributes[:'last_login']
      end

      if attributes.key?(:'invitation_sent_at')
        self.invitation_sent_at = attributes[:'invitation_sent_at']
      end

      if attributes.key?(:'updated_at')
        self.updated_at = attributes[:'updated_at']
      end

      if attributes.key?(:'preferred_locale_code')
        self.preferred_locale_code = attributes[:'preferred_locale_code']
      end

      if attributes.key?(:'created_at')
        self.created_at = attributes[:'created_at']
      end

      if attributes.key?(:'custom_attributes')
        self.custom_attributes = attributes[:'custom_attributes']
      end

      if attributes.key?(:'invalid_login_attempts')
        self.invalid_login_attempts = attributes[:'invalid_login_attempts']
      end

      if attributes.key?(:'locked_until')
        self.locked_until = attributes[:'locked_until']
      end

      if attributes.key?(:'password_changed_at')
        self.password_changed_at = attributes[:'password_changed_at']
      end

      if attributes.key?(:'password')
        self.password = attributes[:'password']
      end

      if attributes.key?(:'password_confirmation')
        self.password_confirmation = attributes[:'password_confirmation']
      end

      if attributes.key?(:'password_algorithm')
        self.password_algorithm = attributes[:'password_algorithm']
      end

      if attributes.key?(:'salt')
        self.salt = attributes[:'salt']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      state_validator = EnumAttributeValidator.new('Integer', [0, 1, 2, 3])
      return false unless state_validator.valid?(@state)
      status_validator = EnumAttributeValidator.new('Integer', [0, 1, 2, 3, 4, 5, 7, 8])
      return false unless status_validator.valid?(@status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] state Object to be assigned
    def state=(state)
      validator = EnumAttributeValidator.new('Integer', [0, 1, 2, 3])
      unless validator.valid?(state)
        fail ArgumentError, "invalid value for \"state\", must be one of #{validator.allowable_values}."
      end
      @state = state
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] status Object to be assigned
    def status=(status)
      validator = EnumAttributeValidator.new('Integer', [0, 1, 2, 3, 4, 5, 7, 8])
      unless validator.valid?(status)
        fail ArgumentError, "invalid value for \"status\", must be one of #{validator.allowable_values}."
      end
      @status = status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          id == o.id &&
          username == o.username &&
          email == o.email &&
          firstname == o.firstname &&
          lastname == o.lastname &&
          title == o.title &&
          department == o.department &&
          company == o.company &&
          comment == o.comment &&
          group_id == o.group_id &&
          role_ids == o.role_ids &&
          phone == o.phone &&
          state == o.state &&
          status == o.status &&
          directory_id == o.directory_id &&
          trusted_idp_id == o.trusted_idp_id &&
          manager_ad_id == o.manager_ad_id &&
          manager_user_id == o.manager_user_id &&
          samaccount_name == o.samaccount_name &&
          member_of == o.member_of &&
          userprincipalname == o.userprincipalname &&
          distinguished_name == o.distinguished_name &&
          external_id == o.external_id &&
          activated_at == o.activated_at &&
          last_login == o.last_login &&
          invitation_sent_at == o.invitation_sent_at &&
          updated_at == o.updated_at &&
          preferred_locale_code == o.preferred_locale_code &&
          created_at == o.created_at &&
          custom_attributes == o.custom_attributes &&
          invalid_login_attempts == o.invalid_login_attempts &&
          locked_until == o.locked_until &&
          password_changed_at == o.password_changed_at &&
          password == o.password &&
          password_confirmation == o.password_confirmation &&
          password_algorithm == o.password_algorithm &&
          salt == o.salt
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [id, username, email, firstname, lastname, title, department, company, comment, group_id, role_ids, phone, state, status, directory_id, trusted_idp_id, manager_ad_id, manager_user_id, samaccount_name, member_of, userprincipalname, distinguished_name, external_id, activated_at, last_login, invitation_sent_at, updated_at, preferred_locale_code, created_at, custom_attributes, invalid_login_attempts, locked_until, password_changed_at, password, password_confirmation, password_algorithm, salt].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      self.class.openapi_types.each_pair do |key, type|
        if attributes[self.class.attribute_map[key]].nil? && self.class.openapi_nullable.include?(key)
          self.send("#{key}=", nil)
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = OneLogin.const_get(type)
        klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
